四、貪婪演算法

貪婪策略（Greedy Method）常用來解決最佳化問題（Optimization Problem）。貪婪
法是最直接的解法，每次的決策都是朝向目前“最好”的方向前進，而且不回頭。可稱作是由
上至下(Top-Down)方法。在最小擴張樹（Minimum Spanning Trees）問題中的Kruskal’s演
算法與Prim’s演算法即是一個很典型的貪婪演算法。此外應用貪婪演算法精神的例子不勝
舉，諸如：最短路徑（Shortest Paths）、背包問題（Knapsack Problem）與排程問題
（Scheduling）皆是。
舉例來說，某一個銀行出納櫃檯要服務n個顧客，銀行的目標是希
望顧客在櫃檯等待的平均時間要最少。解決之道是每次都從尚未服務的
顧客中，選擇需要服務時間最短的顧客來服務，如此就可達到預期目標

。像這樣每次都選擇最小服務時間的策略就是一種貪婪策略，但是除此
之外，為顧及服務品質，也不能讓先來的顧客等太久—即使他必須佔用
較多的處裡時間，所以等待的時間還是要有個合理上限，這不是單獨靠
貪婪演算法就能通盤考慮到的。
