前言
這篇帶給我很大的影響。
對我來說，明白「可測性是最重要的」是一大里程碑。
隨著經驗累積，了解得愈深，愈明白 Miško Hevery 寫得多有道理。
就當我打算寫篇心得時，
才發覺很容易變成用我的話重說 Miško Hevery 說過的東西，
而且還很容易漏講。轉念一想，乾脆翻譯他的文章好了。
二月底時徵得他的同意，沒想到一拖就拖了一個月半，真不好意思。

大家覺得那裡譯得不好或呈現方式不好，就直接反應出來 。
透過 Buzz、Murmur、Plurk、Facebook 或在此留言都可。謝啦。


找出你公司內一般水準的開發者並問他們「你會語言/技術 X嗎？」
沒有人會為承認自己不懂 X
而感到不好意思。畢竟有太多程式語言、框架和技術，你怎麼可能全部都會？但若 X
是寫出能被測試的程式呢？不知為何，我們很難回答這個問題：「你會寫測試嗎
？」不論我們是否真的懂，每個人都回答會。就如同承認自己不懂寫測試是件很
不好意思的事。

我個人認為如果我們能意識到可測試性是一個獨立的技術，我們可以做得好多了
。這種技術並不是天生就會的，需要經年累月的練習來培養。我們可以將它視為
另一項技術並坦率地承認我們不會這項技術。於是我們就能對它做點事。我們能
提供課程或其它教材來讓開發者成長，而不是將寫測試的技術視為如同呼吸的能
力，好像任何開發者都會寫可以測試的程式。

在我開始了解可測試的程式和難以測試的程式的差別前，我花了兩年的時間先寫
測試。在這些程式裡，測試碼的量和產品碼一樣多。問問你自己，你持續寫測試
多久了？在你寫的程式裡，測試碼占了百分之多少？

你可以問這個問題來證明我的觀點：「你如何寫出難以測試的程式？」我喜歡在
面試時問這個問題，多數的時候我得到沉默的回應。有時有人回答「隱藏物件」
。嗯，如果物件的可見範圍是唯一的問題，我可以給你一個正規表示式讓你解決
這問題（譯者注：我猜是在測試程式前先用字串比對把程式內所有 private 換
成 public，那就可以測了）。真正的答案複雜許多，是因為程式的結構造成它
難以測試，而不是命名習慣或物件的可見範圍。你知道答案嗎？

一開始我們都是一樣的。當我第一次聽到測試時，我立即想到寫一個框架來假裝
使用者，使得我能用它來執行被測的應用程式。很自然會這麼想。這類型的測試
被稱為使用者端測試（end-to-end-tests）（或是情境測試、大型測試），它們
應該是你最後寫的測試，而不是一開始想到的。使用者端測試很適合找出
wiring bugs（譯者注：不知該怎麼翻，請參見 wiring bug
連結的說明），但不適合找出邏輯錯誤。並且，你的多數錯誤會是邏輯錯誤，它
們才是難以找到的錯誤。我發覺這有些有趣，為了對抗有錯誤的程式我們卻寫了
更複雜的框架來假裝使用者，於是我們有更多程式待測。

每個人都在尋找解決測試麻煩的神奇測試框架、技術、知識。然而我有個消息要
告訴你：沒有這種東西。測試的祕訣就是寫出能被測試的程式碼，而不是明白測
試領域中某種魔法。並且大概不會有某家公司賣你某種自動測試框架。讓我說得
更清楚一些：測試的祕訣就是寫出能被測試的程式碼！你需要關注你的開發者而
不是你的測試組識。

現在讓我們想想這點。大部份的組織讓開發者寫程式，接著讓一個測試組織來測
試。讓我確保我明白這是怎麼回事，有組人馬寫出無法測試的程式，和另一組人
馬分頭試著測試這些無法測試的程式（喔，而且測試小組不被允許改變產品碼）
。開發者是錯誤的來源，測試者感受這些痛苦。你認為有任何誘因讓開發者改變
他們的行為
—
如果他們沒有為他們製造的錯誤而感到痛苦？在不能改變產品碼的情況下，測試
組織能夠有效地作事嗎？

躲在能建造／買來的框架後面是很容易的，事情也會改善。但是問題的根源是無
法測試的程式，直到我們學會承認我們不懂如何寫出能被測試的程式，情況不會
改變的．．．。
