  雖然系統日誌能夠留下如此完整的記錄，
  但確經常遭到破壞而無法使用。
  因為大部份的入侵者在侵入系統作案之後，都會設法破壞或修改系統日誌檔，
  以消滅或掩蓋入侵的痕跡，使事後無法追查。


近年來因為網際網路相關技術日漸成熟，全面帶動了我們走向一個電子化的社會，
使愈來愈多個人機密或隱私的資料存放在電腦當中或是在網路上傳遞。
資訊系統和網路安全成為一個十分重要的課題。
UNIX系統中有許多的日誌檔，用來記錄系統中所發生的各種事件。
當系統發生問題時，系統日誌往往是追尋問題唯一的線索和依據，
但是卻經常遭到刻意的破壞或修改而無法使用。
如果能夠找到方法確保系統日誌的完整性，對系統的安全將有很大的助益。
本論文提出了一個方法，透過作業系統核心的研究與改進來強化系統日誌的安全性。
初步評估顯示，我們的作法比目前利用密碼學的作法有較好的效果，
同時系統在效能上也不會有明顯的降低。


1.緒論隨著資訊技術的蓬勃發展，人類生活的模式發生了很大的變化。
近年來更因為網際網路以及電子商務等相關技術的日漸成熟，
全面帶動了我們逐步走向一個電子化的社會，
愈來愈多個人機密或隱私的資料存放在電腦當中或是在網路上傳遞。
資訊系統和網路安全成為一個十分的重要的課題。
資訊系統及網路安全的研究層面很廣且環環相扣，
都十分重要而缺一不可，需要密碼學、資訊安全、
作業系統以及網路等各領域的研究人員通力合作。
密碼學經過了多年的研究和發展已有了不錯的成果，
綜觀近來所發生的安全問題極少是因為密碼演算法或安全協定出問題，
其原因大都是因為系統有安全上的漏洞、密碼模組設計不良等原因造成。
因此，如何從軟體開發、作業系統以及網路系統本身的角度切入進行研究，
也就更顯的重要。
這些logfiles對一般人而言或許不覺得重要，
但它們確是一個安全的電腦系統不可獲缺的基本元件[1][2][3]。
當系統發生問題時，系統日誌是追尋問題唯一的線索和依據。
我們可以透過這些日誌檔找出系統可能的錯誤，或在系統被入侵時找出可能的來源，
並藉以協助評估系統損害的範圍，
作為擬定系統復原程序或向外求援的重要依據。甚至可以做為証物，
以取得賠償或保險理賠，
或做更進一步系統安全性的研究。雖然系統日誌能夠留下如此完整的記錄，
但確經常遭到破壞而無法使用。因為大部份的入侵者在侵入系統作案之後，
都會設法破壞或修改系統日誌檔，以消滅或掩蓋入侵的痕跡，
使事後無法追查。如果能夠找到方法來確保系統日誌的完整性，
除了在必要時能協助我們重建系統或採取相關保護自我權益的行動外，
相信對入侵者也會產生一定的嚇阻作用。
因此，如何保護系統日誌的安全，也就成了一個重要的研究議題。傳統UNIX系統的日誌檔均被設計成一般的檔案，透過檔案系統來存取，也是利用傳統的使用權限設定來保護。入侵者一旦入侵成功，取得了root的權限，自然有辦法去修改日誌檔的存取權限以達到修改或破壞其內容的目的[7][8]。BruceSchneier和JohnKelsey在1999年提出了他們的相關研究成果[4][5]。他們明確的指出，單憑密碼學的技術並無法阻止系統日誌不被刪除或破壞。在本論文中，我們透過Linux作業系統核心的研究與改進，在一般的untrustedmachine上設計並實作了一個安全的系統日誌環境，使日誌檔無法被竄改。依據效能評估顯示，系統在整體的效能上不會有明顯的降低。2.相關研究在提昇系統日誌安全性的研究上，一般的想法[10][11]是利用一部standalone的電腦做為securelogginghost，該電腦再透過serialline與網路的loghost(可能untrust)相連。loghost因為較可能受到侵害，所以會將其系統日誌透過serialline存到另一部securelogginghost上去貯存。此一方法雖然不錯，但實際上我們還是會有要在一般的untrusted的電腦上貯存系統日誌的需求[4][5]。BruceSchneier和JohnKelsey在1998和1999年發表了相關的研究成果[4][5]，在其研究中假設有一個untrustedmachineμ必須記錄系統的auditlogs，另外有一部trustedmachineτ，而μ不定期的與τ交談，由τ來確認log資料的正確性，他們利用了MACs(MessageAuthenticationCodes)和encryptionkeys等密碼學的方法，對加入log的entry加以處理，確保系統μ在被妥協(compromise)之前所記錄的log可以不被入侵者讀取、或做無法察覺的修改與刪除，所有被修改或刪除的資料會在下一次與τ進行交談時被偵測出。在他們的研究成果中，也提出一個重要的概念，單憑密碼學的技術並無法阻止log不被刪除或遭到破壞。RaySpencer、StephenSmalley和MikeHibler等人[12]，提出作業系統應該對各種securitypolicy提供足夠的支援和彈性。VincenoCutello等人亦提出了相關的研究[6]，他們修改了關於檔案系統的執行、開啟以及存取權限控制的部分程式碼，設下檢查點以查核使用者名稱與權限，達到即便有root權限也只能對日誌檔案進行新增的動作，必須要同時取得root與auditlog管

Page 3
3理者的雙重權限才能夠修改系統日誌的內容。我們認為這樣的做法在日誌系統上並不適當，設下重重關卡作驗證的工作，會使得某些常用的系統動作(operations)執行效能明顯降低，如Netscape效能下降了將近30%左右。另外，auditlog管理者權限也有可能因為其他程式的安全漏洞而遭到盜用，使系統日誌遭到破壞。3.Linux上系統日誌的作法在Linux系統日誌中，我們可以將日誌檔案系統分為兩類：系統層級的日誌檔案與應用程式本身的日誌檔案。系統層級的日誌檔案提供了syslogd(syslogdaemon)做為統一的窗口。應用程式可以選擇自行實作或透過syslog之系統呼叫(systemcall)，使用系統所預設之系統日誌機制(如圖二所示)。因此syslogd會隨時隨地從系統的各處接收記錄log檔案的請求，接著便根據/dev/syslog.conf的設定內容，將需記錄的信息記錄至相對應的檔案系統中。syslogd會記錄許多重要的資訊，如kernelmessage、user-levelmessage、mailsystem、systemdaemons、syslog等。4.系統設計與實作4.1系統設計深究系統日誌容易遭受不法的破壞與修改的原因，大多是因為入侵者利用系統的缺陷以及管理方面的漏洞，進而取得超級使用者的權限(superuser,root,supervisor)，往後系統控制權便落入入侵者的手中。由於UNIX系統的日誌檔案系統被設計為一般的檔案系統，並且使用傳統的檔案管理加以管理、保護，因此一般的入侵者一旦取得root權限之後，便可以很輕易的修改或破壞系統日誌的完整性。因此我們認為一個安全的系統日誌環境必須切入作業系統，由核心提供足夠的支援，以確保日誌的完整性。我們的作法是修改作業系統核心，提供一個透明化系統日誌磁碟(transparentlogdisk)來儲存所有重要的系統日誌檔案。而為了避免其他使用者透過/dev目錄下直接存取該logdisk，因此該transparentlogdisk磁碟裝置將不會出現在/dev目錄之下，當然也不受一般檔案系統的存取與控制。在一般的系統運作模式下，我們的logdisk將被設計為一個append-only的FIFObuffer，不接受一般檔案系統存取的命令如read()、write()，而只能透過我們所新設計的系統呼叫sys_log()來加入新的日誌資訊。任何process(即使取得了root的權限)只能讀取或新增資料，無法更動系統日誌檔上已有的內容。因此，即使入侵者取得了root的權限也無法刪除他在日誌檔上所留下的痕跡。另外，我們將修改作業系統核心，設計出一個維護模式(maintenancemode)。在維護模式下不提供網路的連線，只提供單純而必要的功能，也只能在系統控制台(systemconsole)透過root登錄及日誌維護管理員登錄等兩道驗証方能進入。因為有了如此嚴苛的限制，入侵者幾乎無法進入而破壞日誌的完整性。當然實體破壞所造成的危害不在本研究範圍內。
4圖1：Linux預設系統日誌機制在維護模式下，我們系統會提供另一組管理工具，
讓日誌管理員對日誌做清除不需要或舊資料的動作，
日誌管理員也可以在此模式下選擇性的將日誌資料轉存或備份到磁帶或
CDR等貯存媒体上，做長久的保存並清出logdisk上的空間。
為了考量系統長時開機提供服務的需求(無法進入維護模式)，
或logdisk容量不足的情況，
當auditlogmanager發現logdisk
的容量少於管理員自定的最低限度時，
會自動將logdisk前端的資料依序寫入CDR中，
以在logdisk上清出足夠的空間。4.2系統實做為了達成透明化的設計，我們希望針對統一的窗口進行修改。syslogd為應用程式開啟了統一的窗口，採用系統提供之日誌系統的應用程式，只要呼叫syslog()的系統呼叫，即可透過syslogd將必要的訊息記錄至系統日誌中。我們修改了syslogd，當它進行寫入系統日誌的動作時，會利用我們實做的系統呼叫sys_log()，透過我們所設計的日誌管理系統，將欲寫入系統日誌的資料進行寫入logdisk的動作。因此，採用系統提供之日誌系統的應用程式，本身不須要做任何的修改，即可將資訊寫入我們的安全日誌中。我們的系統如圖二所示。4.2.1.透明化設計系統在開機(boot)時，系統會將目前系統中的實體硬碟註冊至/dev之下，以便系統與使用者能夠掛載該實體磁碟內的檔案系統，然而本系統基於安全考量，因此不允許使用者甚至最高使用者能夠從/dev中掛載該logdisk，進而利用檔案系統對logdisk進行修改、刪除的動作，因此我們修改核心中實體磁碟註冊之動作，避免logdisk註冊在/dev之下，使用者無法叫用驅動程式中的函式操控該logdisk。另外，我們也設計了logdisk專用的中斷處理函式(log_ide_intr)，以便處理log磁碟讀寫的動作。
Page 5
5圖2：安全系統日誌機制4.2.2系統呼叫為了本系統的實作，
我們新增了一個系統呼叫sys_log()，
也修改了原有的sys_sync()系統呼叫，
另外也新增了一個log_sync()的核心函式。lsys_log()：sys_log為本系統所新增的系統呼叫，當syslogd將系統日誌寫入相對應的檔案時，
會利用呼叫本systemcall進入logdisksubsystem中，
進而將訊息寫入logdisk中。llog_sync()：當系統關機或系統重新啟動時，
系統核心會呼叫sys_sync函式，將記憶體內的資料儲存，
因此為了避免logdisksystem中緩衝區內的資料遺失，
因此在sys_sync函式中需呼叫新增的log_sys()函式將緩衝區內的資料寫入logdisk中。log_sync()函式中，
則實作將緩衝區以及第0個磁區內的metadata，
寫回系統日誌磁碟中，而在logdisk的第0個磁區內存放的metadata則包含了logdisk之magicnumber與系統日誌的開始位置與結束位置。5.效能評估在我們的系統中，針對系統日誌的寫入動作加以限制，入侵者即使擁有最高使用者權限也無法對logdisk進行覆蓋、刪除或修改的動作，提高了系統日誌的完整與安全性。為了評估本系統是否因為修改日誌系統而造成系統效能的下降，
我們進行了三個實驗。第一個實驗：Boot，為一般Linux開機的程序，
由寫入logfile的時間開始計算直到開機完成等待login為止；第二個實驗：grep，
為尋找字串指令，我們選擇由Linux核心原始碼目錄下開始尋找，
grep–r“sys.c”*計算出指令執行到完成所需的時間；第三個實驗：makekernel，
為編譯核心程式碼的動作，計算從開始編譯至編譯完成所需花費的時間。
實驗的環境如下CPU為PIII800,RAM為256MB,作業系統RedHat7.3kernel2.4.18，
logdisk硬碟之轉速為7200rpm，
實驗的結果如圖三所示。在一般使用者的執行動作中，
如boot、grep(尋找字串及檔案)、makekernelimage中，
從實驗結果可以看出系統效能的影響並不顯著，
平均效能下降的百分比為：boot:0%、grep:0.407%、makekernelimage:7.337%，
相較於VincenoCutello等人所提出相似的研究成果[6](boot:60%、grep:13%、makeauditsystem:20%)，
在效能方面有相當顯著的改善。圖3：系統效能之比較6.結論與未來展望利用系統核心的修改，
本論文針對Linux作業系統上的日誌系統提出了一個安全且有效率的方法，
相較於其它的方法，我們有下列的優點:
(1)不需有一部trustedmachine的假設
(2)不需經過複雜的密碼計算(3)提供更強的保護，解決了傳統密碼學無法防止入侵者針對系統日誌進行修改的缺憾(4)runtimeoverhead極低，不影響系統原有之效能。有了完整的日誌資訊，除了可以對入侵者產生嚇阻作用和必要時作為追蹤或入侵來源的依據外，還可配合各類的分析工具如LogSurfer和SWATCH等，發展出入侵偵測系統(IntrusionDetectionSystem)的雛形，用來偵測異常或是不法的行為。此外，我們也將繼續針對使用的效能及便利性進行更進一步的改良。
