二元樹
------
define.二元樹
  二元樹是由一群節點所組成，每個節點最多連結兩個子節點。
  其子節點區分為左子節點及右子節點。

  由圖論來理解，二元樹是無環連通圖，其度數最大為二，
  其中有個特別的節點定義為根；其連接的子節點有作左右區分。

  node=(left(node),right(node)).

*完全二元樹的節點數為 2^h-1    
    此為判斷完全二元樹的指標之一。
*樹高與節點數的關係 h=log(n+1,2)    
此關係指出二元搜尋樹接近完全樹，則搜尋鍵值時間可壓縮成
對數時間。o(n)=log(n)
*左子右弟 left child, right sibling    
此法可將任何樹狀結構以二元樹表示

為何要求樹狀結構？
*樹狀結構可把線性資料用階層組織表達    
*搜尋時間與樹高成比例，而非與資料長度成比例        
*若樹成平衡樹，則樹高與資料量 n 成對樹關係    

theorem.
  二元樹任兩個節點之間，存在唯一的路徑
proof.
  這可由樹定理推得。

以值組表示二元樹
~~~~~~~~~~~~~~~~
tree = Tuple2BTree((2,(7,2,(6, 5, 11)), (5, None, (9, 4)))

樹的尋訪(travel tree)
~~~~~~~~~~~~~~~~~~~~~
尋訪是輸入一樹，
並傳回一序列包含所有的節點的函數。
簡單說就是把樹作線性排序。

一般說來尋訪包含三個步驟：輸出節點、訪問左子樹、訪問右子樹，
其中輸出節點通常為將節點值加入至結果序列中，
訪問左子樹為向左子樹移動，
訪問右子樹為向右子樹移動，
令 p 表輸出節點的步驟、l 表訪問左子樹、r 表訪問右子樹，
則有輸出的順序會有下面的組合：
t={plr,lpr,lrp,prl,rpl,rlp}

通常會先拜訪左子樹，再拜訪右子樹，
而命名是來自於輸出的序列與數學公式前序符號、
中序符號及後序符號字串一樣而來，
有下面三種：

table.
==== ========= === ====================
前序 preorder  plr 輸出節點在訪問子樹前
中序 inorder   lpr 輸出節點在訪問子樹中
後序 postorder lrp 輸出節點在訪問子樹後
==== ========= === ====================

若是調換左右子樹的訪問順序，則稱為
反序尋訪 reverse order，
列舉如下：
 
table.
====== ================= ===
反前序 reverse preorder  prl
反中序 reverse inorder   rpl
反後序 reverse postorder rlp
====== ================= ===

tree. 
        2
       / \
      7   5  
     / \   \
    2  6    9
      / \   /
     5  11  4
::

其尋訪序列為：
前序:2 7  2 6  5 11  5  9  4
中序:2 7  5 6 11  2  5  4  9 
後序:2 5 11 6  7  4  9  5  2     

與 dfs 的關係
~~~~~~~~~~~~~
dfs 先探訪離起點最遠的節點，在樹的情況中，
dfs 的實作不用額外記憶尋訪過的節點，
由 3.2.1 得知樹中每不同兩點間僅有唯一的路徑，
故不可能經由不同路徑探訪至探訪過的節點。
以上樹的尋訪均是 dfs 的特例，其中前序最接近一般的 dfs。

階層尋訪(level order)
~~~~~~~~~~~~~~~~~~~~~
二元樹的階層尋訪便為 bfs 的特例。

引線樹(threaded tree)
~~~~~~~~~~~~~~~~~~~~~
二元樹表示集合

二元樹表示樹及森林

用前序及中序序列建立唯一二元樹
