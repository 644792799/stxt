Q.Howto uniqify a list in Python?

>>> lst = [1, 1, 3, 4, 4, 5, 6, 7, 6]
>>> list(set(lst))
[1, 3, 4, 5, 6, 7]


Sorting Lists
~~~~~~~~~~~~~
The sort method sorts a list in place.

    L.sort()
To get a sorted copy, use the built-in sorted function:

    out = sorted(L)
An in-place sort is slightly more efficient, since Python does not have to allocate a new list to hold the result.

By default, Python’s sort algorithm determines the order by comparing the objects in the list against each other. You can override this by passing in a callable object that takes two items, and returns -1 for “less than”, 0 for “equal”, and 1 for “greater than”. The built-in cmp function is often useful for this:

    def compare(a, b):
        return cmp(int(a), int(b)) # compare as integers

    L.sort(compare)

    def compare_columns(a, b):
        # sort on ascending index 0, descending index 2
        return cmp(a[0], b[0]) or cmp(b[2], a[2])

    out = sorted(L, compare_columns)
Alternatively, you can specify a mapping between list items and search keys. If you do this, the sort algorithm will make one pass over the data to build a key array, and then sort both the key array and the list based on the keys.

    L.sort(key=int)

    out = sorted(L, key=int)
If the transform is complex, or the list is large, this can be a lot faster than using a compare function, since the items only have to be transformed once.

Python’s sort is stable; the order of items that compare equal 
will be preserved.
