複雜度理論
----------

複雜度理論，目的就在於了解運算問題在時間、記憶體與資源方面的需求，
資源需求越多表示題目越困難。

測量複雜度
~~~~~~~~~~

計算所需時間主要以執行次數來衡量，
所需空間主要以記憶體之用量來衡量。

時間複雜度可以下列函數衡量，
令 f：N -> N 為一個函數，
則 f(n) 表示輸入長度為 n ，
圖靈機執行 O(f(n)) 次數所能決定之問題。

1.最糟情況分析(worst-case analysis)

係指以某個長度的所有字串輸入的最長執行時間來考量。

2.平均情況分析(average-case analysis)

係指以某個長度的所有字串輸入的平均執行時間來考量。

3.漸進式分析

所謂漸進式的分析是針對大的輸入來分析演算法的執行時間，
表示執行時間的函數中只要__考慮高次項__，
而且__系數可省略__。

運算模型不同，則語言的時間複雜度也會不同。
常見的模型：

single-tape Turing machine、

multitape Turing machine、

nondeterministic Turing machine。

P 類型運算
~~~~~~~~~~

假如一個運算問題屬於 P，
則會有一個能在 n**k(k 為常數)時間內解決這個問題的方法。

屬於 P 類型的運算問題的語言可以由 
deterministic single-tape Turing machine 在多項式級的時間內決定。

NP 類型運算
~~~~~~~~~~~

NP 運算問題代表 nondeterministic polynomial time problem。

杜寧機器和有限自動機最大的差異是在於：記憶體無限。

運算模型功能比較：狀態變化無限＞狀態無限＆記憶體無限

Satisfiability problem 是屬於 CLASS NP 問題。

西元 1936 年 Alonzo Church 與 Alan Turing 發表的論文試著給演算法下定義，
Church 使用 λ-calculus 來定義演算法；
Turing 使用 machine 的觀念來定義演算法。

※ 下面各種語言類別之間的關係
Regular≦Context free sdecidables≦Turing recode（應該是包含於或等於符號）

演算法的複雜度-時間與結果的考量

為了要以簡單，共通的方法算出問題的答案，人們發現問題中存在的規律
性後就將其定為所謂的公式，一旦找出公式後，只要將問題的資料代入對映的
公式中就能得到正確的答案，經由此種方式，人們對於許多相同的問題就能在
很短的時間算出，例如有名的牛頓定律F=ma，狹義相對論中的愛因斯坦定律

2
m / 18
E= mc ，和工業界的摩爾定律D= c 2
等，根據 Alan Turing (1912 -1954) 所提

出的Turing Machine，可知公式都是可算的函數(computable functions)，簡單的
描述Turing Machine架構如下:將某個問題的計算規則都輸入Turing Machine後，
在一條無限長的帶子(可前後移動)打上此問題的input data， Turing Machine可
將之讀入並把output data打在帶子上，將正確的規則輸入Turing Machine後，
Turing Machine能算出的問題，都是computable。

無限長的帶子

Turing Machine

Read –write head

但不是所有的函數Turing Machine都算的出來，還是有不可算的函數(non-
computable functions)，就舉個最基本的問題作為例子，假設存在一個程式(T)會
將任何程式(P)和其input data(D)當成自己的input data 然後判斷出那個程式是否最
後能停止而不會跑進無窮迴圈，則

program(P) + Data(D)

program(P) + Data(D)

T T′ t 
　
print WILL STOP，stops

print WILL NOT STOP，stops

print WILL STOP，enters an infinite loop

print WILL NOT STOP，stops

P+P

C

T′

Q

If P+P will stop，enters an infinite loop

If P+P will not stop，stops

If P+P will stop，enters an infinite loop

If P+P will not stop，stops

If Q+Q will stop，enters an infinite loop

Q

If Q+Q will not stop，stops

由上圖可知
1. 如果program Q 用program Q 當作input data時會停止時，program Q將會
進入無窮迴圈
2. 如果program Q 用program Q 當作input data時會進入無窮迴圈時，
program Q將會停止
但此兩個描述都是自相矛盾的，因此推得並無T這個程式(可視作某個函數)存
在，這就是一個無法算的函數了。

可算的問題(函數)是我們比較有興趣的，就目前的情形而言，只要能找
出演算法(algorithm)的題目都是可計算的，相同的題目又可能有一種以上的
演算法，例如我們要解sorting
problem時就有許多的演算法如Bubble
sort，
Quick sort，Insertion sort…..等等，而種種問題和其演算法的計算複雜度(time
complexity)就是用來判斷計算所需時間的依據，我們先看看sorting problem和它
的演算法的計算複雜度(time complexity)
Problem
Sorting
nlogn
n2
Algorithm
Bubble sort
Quick sort
nlogn
Insertion sort nlogn

n代表problem input size

一個問題的計算複雜度是其所有演算法中所需的最小計算複雜度，例如
sorting，它最小的計算複雜度的演算法是nlogn，至於每種algorithm有用到不同
的方法，所以會有不盡相同的計算複雜度，以下是bubble sort 的algorithm:

x1

1

x2

4
x3 2
x4 3

共需要 n+(n-1)+(n-2)+..+1=n(n-1)/2次 比較

根據不同的time complexity我們又可以把algorithm分作快的和慢的兩大類，
快的algorithm就是其time complexity對problem size(n)是polynomial function，
3
如 n ， n ， nlogn ， n …..，慢的algorithm就是其time complexity對problem

size(n)是exponential function，如 2 ,3 , n! …，由此可知bubble sort， quick sort是
快的algorithm，而partitioning則是慢的algorithm，當然問題也可以依此方法
來分類，如果其time complexity是以polynomial function當作上限，則分在容
易處理類(tractable)Ex: Sorting ， Linear Programming，若其time complexity是
以exponential function當作下限的話就分在不易處理類(intractable) Ex: Boolean
Equivalence;下表可明顯看出polynomial function和exponential function在n由小到
大時的變化，在n 變大時，exponential function會遠比polynomial function的值來
的大，也就是說在n不大時所需的計算時間並不相差很多，但隨著n的變大，所

time complexity 為 n

需的計算時間會以難以想像的速度成長。

NP-困難問題
~~~~~~~~~~~
第一點，NP-困難問題的難度「至少」和NP 完全問題是一樣的，
換句話說，NP-困難至少跟NP 完全問題一樣難，
而且在許多情況下NP-困難「更難」。
所有的NP問題(包含NP 完全問題問題)都可以化約成NP-困難問題。

意即其他屬於NP的問題可變換（reducible）成它。

可變換在此意指對每個問題L，
總有一個多項式時間多對一變換，
即一個決定性的演算法可以將實例 l in L 轉化成實例 c in C，
並讓c 回答Yes若且為若答案對 l 也是 Yes。

為了證明某個 NP 問題 A 實際上是NPC問題，
證明者必須找出一個已知的NPC問題可以變換成A。

NP 完全問題
~~~~~~~~~~~

它是一個NP-困難問題，

和Non-deterministic對應的就是deterministic了。Deterministic在這邊是指

Turing Machine裡面的行為準則對應表，每一次改變狀態的時候，只要前一步的
狀態確定，下一步的狀態是確定可預測的。Non-deterministic的行為準則表，
則是前一步的狀態即使都一樣，下一步的狀態是不可預測的，有兩種以上的可能
。因此non-deterministic Turing Machine的計算能力會比Deterministic
 Turing Machine的計算能力多。也因此同樣是polynomial的時間複雜度，NP的
問題會比P來的難。至於NP是否等於P，目前是仍未解決的問題。講到這邊覺得還
是不夠白話，也許不懂的讀者可以先跳過這兩段，待日後另外一篇文章再詳細解
說。

知道了NP怎麼來以後，NP 完全問題的定義就簡單了。一個問題如果是NP，而且
又是NP-困難，那麼這個問題就是NP 完全問題。之前提到的Job-Shop Problem和
今天提到的Travelling Salesman Problem，都是NP 完全問題的問題。不過可能
會問，NP-困難是甚麼呢？NP-困難是指某個問題可以化約成另外一個
NP 完全問題的問題，就是NP-困難了。也就是說，如果A問題可以化約成B問題，
就代表說，如果B問題解決了，A問題就跟著解決，也就是A問題比B問題難一點的
意思。(有學過計算理論的話，補充一下化約過程是要polynomial-reducible)
 經由這個化約的過程，我們可以一直化約，把各個問題組織成一個化約關係的
樹。

用計算複雜度把問題分作易處理和不易處理後，
其實中間還是有些灰色地帶尚未能做出分類，
而這個地帶就是NP 完全問題 problems，
為何NP 完全問題 problems無法分類呢?
因為沒有人能找出 NP 完全問題 problems 的 polynomial-time algorithm，
卻又不能證明他們有 exponential-time 的下限，
也就是找不出問題的計算複雜度，
可是很多重要的問題都是 NP 完全問題，
NP 完全問題有個很特別的性質，
就是一旦有一個NP 完全問題問題被找出polynomial-time的 algorithm的話，
那麼所有的NP 完全問題問題都找的到polynomial-time的 algorithm，

相反的，如果有一個NP 完全問題中的問題被證明出有exponential-time的下限的話，那麼所有的NP 完全問題問題都有exponential-time的下限，
也就是這些問題已經無法算出最佳解了，
可知NP 完全問題 problems全是容易處理的(tractable)，
或著全是不易處理的(intractable)，
但要將 NP 完全問題歸類是和求NP 完全問題的polynomial-time algorithm一樣難的問題，
所以目前沒人能回答，那退而求其次，
要如何判斷一個問題是否為NP 完全問題呢?
如果一個問題不是NP 完全問題，
則可以試著找polynomial-time的algorithm，
如果是NP 完全問題，最好想其他方法，才不會浪費時間，以下就是判斷一個問題是否為
NP 完全問題的方法：
1.先判斷問題L是否是NP(nondeterministic polynomial time)，若不是NP就不是
NP 完全問題。
2.選一個已知是NP 完全問題的問題L′。
3.描述一個演算法可以算出一個函數f，而f可將L′轉變成L。
∗
x ∈ L′
f ( x) ∈ L
0
4.證明函數f滿足此條件:
若且唯若
，對所有的 x ∈ { ,1} 。

5.證明可算出f的演算法會在polynomial time執行完成

在確定問題是NP 完全問題或是不易處理(intractable)後，面對這兩種沒有
polynomial-time algorithms的問題該怎麼做呢?我們要作出選擇，若要算出最佳解
可以用exponential-time的algorithm或窮舉法，若是近似值也能接受的話，就可找
近似演算法(approximation algorithms)來作計算，當然你必須先考慮是時間重要
還是最佳解重要了。

舉個有名的NP 完全問題問題Traveling Salesman來比較這兩種方法:
求通過a,b,c,d,e,且不重覆的最短路徑(此路徑為一Hamiltonian circuit)

Fig 1.1

11

Exact algorithm(Brute force algorithm):

Try (n-1)! Possible solutions

98
4!=24
9!=362，800
69!= 1.71122 × 10
1.71122 × 10 98
= 1.71122 × 10 88
10
10
seconds
88
1.71122 × 10
= 5.42626 × 10 78
60 × 60 × 24 × 365 × 100
centuries

可知要求最佳解是要算蠻久的

Approximation algorithm: nearest-neighbor method

1.先在G上任選一點，並找出離它最近的點來形成第一條路徑。
2.設x為最近加入路徑的點，並找一個離x最近且尚未加入路徑的點，將此點和
它與x的連接線加入路徑，重覆此步直到所有在G上的點都加入路徑為止。
3.將第一點和最後一點的連線加入路徑後就形成一個環路。

Step 1

Step 2

Step 3

Step 4

Total length d=40

把所得結果和最佳解比較
the best result is

Total length

Fig 1.2

d
1
1
≤ lg n  +
2 ，n表示要通過的點數
可找出d和 的關係為一定律 d 0 2
證明:
d 0 =37
在進行證明之前，先讓我們藉由思考一特定情況來說明我們對證明的作
法，設D是用nearest-neighbor method得到的Hamiltonian circuit。設 l1 是D中最

長一段線段的長度， l 2 是D中次長線段的長度，依此類推， l i 是第i長線段的長
度，所以可知


為了要說明，先設n=14，如果我們能證明
則我們應該可得

對一般的n，我們可以建立一組類似於(1.1)的不等式組，亦即我們將證明

要注意如果n是偶數時(1.4)已被包含在(1.3)中。
利用三角不等式，(1.2)顯然成立。假設在D中最長的線段是以x和y為端點，
則依三角不等式可知任何從x到y的任何路徑都大於或等於 l1 。既然任何G中的

Hamiltonian circuit都可以被拆成x和y之間的兩段路徑，因此(1.2)成立。

令 ai 為利用nearest-neighbor method 找Hamiltonian circuit D時，D中的第i長
的線段所加進去的點(ex:根據這個命名法，在圖Fig. 1.1的點的名字即如圖Fig.
n 
a i 1 ≤ i ≤ 2k
1≤ k ≤  
 2  ，設H是包含了點 ，
1.3a所示)。對一個固定的k，
，的G的完
全子圖。設T為H中的Hamiltonian circuit，而它所經過的點的順序是和G中最短
(佳)的Hamiltonian circuit經過G中的點的順序一樣(所有在G中卻不在H中的點都將

跳過)。設t是T的長度(在圖Fig1.1，設k=2。H如Fig1.3c 所示。在圖Fig1.2所示的
最短Hamiltonian circuit中，經過點的順序是 a1 , a 2 , a3 , a 4 , a5 。所以T環路就如

Fig1.3b所示，且t=36)。藉由三角不等式，可得

{ , a }是T中的一條線段。假如在我們根據nearest-neighbor method形成
a

設

i

a a
w(ai , a j ) ≥ l i
a
a
Hamiltonian circuit時， i 比 j 先經過，則
。假如 j 比 i 先經過，則
w(a j , ai ) ≥ l j
w(ai , a j ) ≥ l j
a
a
。亦即
，因此，不管先經過 i 或 j ，都可得

w(ai , a j ) ≥ min{i , l j }
l

將(1.6)對T中的所有的線段依照取和，可以得到

中最小的值是 2 k ，第二小的值是 2 k −1 ，等等依此類
1 ≤ i ≤ 2k l i
推。同時，對任意i，
， 在(1.7)右邊的和之中，最多出現兩次。因為

在不等式(1.7)中，

T中共有2k個線段，(1.7)右邊的和大於或等於T中比較小的k個線段的長的和的兩
倍，因此可得

∑ min(l , l ) ≥ 2(l

( a i , a j )∈T

合併(1.5)和(1.8)，即可得(1.3)

不等式(1.4)的證明方法跟不等式(1.3)類似(只需考慮n為奇數的情形)。令

代表最短的Hamiltonian circuit。利用導出(1.7)的同樣討論，可得


利用導出(1.8)的同樣討論法，可得

差會以很緩慢的比例增加，以所需的時間和所得結果來看的話，近似演算法確
實很有用，在此例中也能看出當problem size很小的時後還可以選擇用全部算出
的方法，但problem size一旦變大了，只能選擇近似演算法，否則可能永遠都算
不完。

在很多科學領域中的問題都是NP 完全問題，也都要用近似演算法來處理，
茲舉出幾個較為有名的領域:

PERT Chart (Programming Evaluation and Review Technique)

Transportation Scheduling

Process Control

Robotics

Avionics

Parallel Computation

Synthesis of VLSI Circuits

我們再看一個例子，Job Scheduling:

下圖代表八個工作所需的工作時間，以及須遵守的執行順序
(Ex:最右邊的工作要做以前必須先完成兩個有箭頭指向它的工作，
其餘依此類推)，
有兩個處理器
可以工作，但是一個工作只限一處理器做，問需多少時間才可完成所有工作？

此題也沒有人找出最佳解的演算法，所以要比過所有的方法後才能得到最
短的時間，而近似演算法 no intentional idleness卻能找出不錯的結果，當然近似
演算法不需花太多的時間，這個演算法顧名思義就是只有在沒工作可做時才將
處理器閒置，以下是近似演算法的結果和最佳結果的比較

的關係為一定律 w0

代表閒置中

n ，n為處理器的數目

證明:
一閒置期的結束時刻,正好是某一工作完成時刻
為了可以用簡化表示法，我們只證明n=2的情形，一般的情形可以同法證
Fig 2.1
明，就no intentional idleness的輪工表來看，見圖2.1，我們發現在一個處理器的
閒置時間結束的同時必是另一個處理器執行完一個工作的時候(否則閒置時間不
φ
T
φ
會結束)。設 i 是一個處理器的其中一段閒置的時間，一個工作 ij 是和 i 時間相
T
φ
衝的意思是，在輪工表中，一個處理器完成工作 ij 的時段跟 i 相交。例如在圖
2.1中， Ti1 ， Ti 2 ， Ti 3 和 φ i 時間相衝。對閒置期 φ i ，令 Ti1 ， Ti 2 ，….， Til 為與 φ i 時

間相衝的工作。欲證
Ti1 ≤ Ti 2 ≤ Ti 3 ≤ ..... ≤ Til

設此關係不成立，那麼 Ti1 ， Ti 2 ， Ti 3 ，這些工作就不必在 P2 中依序執行了，而
P
T
T
是可以利用 1 閒置的時候來執行。同樣的，跟據剛才的討論，如果 j1 ， j 2 ，
T j3
T
φ
，…， jm 為與另一閒置期 j 時間相衝的工作，則
T j1 ≤ T j 2 ≤ T j 3 ≤ ..... ≤ T jm

很清楚的是每件在 Til 完成後才執行的工作一定是 Til 的後繼工作(不然他們可以
*
T
在 φ i 期間以 P1 執行)。由上可推得一原來工作群 的子集合 ，滿足：

1. * 是一鏈

∑φ ∈Φ i
k
2. ∑T ∈*
其中 Φ 為輪工表中所有閒置期所成的集合。
因為

這個例子中的近似演算法的效果更好，即使在problem size趨近無窮大的情
況下卻只和最佳解差在兩倍之內，看完這兩個例子後相信你已經對NP 完全問題
problems和approximation algorithm有更深一層的認識了，NP 完全問題讓我們知道
該以什麼方式來處理問題，approximation algorithm除了能算出近似解之外，更重
要的是它給了我們一個解答的保證，只要有了approximation algorithm的結果後，
可以再嘗試其他的algorithm，如randomize algorithm，heuristic algorithm
等等，會否得到的更好的結果，如果有，當然很好，若沒有也不怕會沒有可用的
解答，
至少有個只和最佳解差在一定程度的答案在備用，這會給我們更多研究的空
間，來幫麻煩但很重要的NP 完全問題 problems尋求更好的答案。

第二點，這篇文章所描述的TSP問題，有一個很重要的關鍵：「用最少的旅費」
。這種TSP問題，可以在決定任何一條路徑之後，很快得知該路徑的旅費，但是
卻要把所有的路徑都試完才能得知是否是「最少」。這個問題其實是一個NP-困
難問題，而不是NP 完全問題問題。

第三點，文中的「化約關係的樹」圖，看起來很像Intro. to Algorithms書中的
圖，不過有些差異。書中的「SUBSET-SUM」是接在「VERTEX-COVER」下面，
而「HAM-CYCLE」則是接在「3-CNF-SAT」之下。
實際上Hamilton-Cycle也的確不適用於化約成Vertex-Cover或是Clique，
這兩類的問題定義上有較大的差別。

第四點，因為這張「化約關係的樹」圖的根是「CNF-SAT」，所以可以推知此圖
是描述最後化約為NP 完全問題的化約關係。那麼這張圖上的TSP，應該可以化約
為最原始的SAT，也就是NP 完全問題才對。關鍵在於，這張圖上的TSP問題與本
文中描述的TSP問題是不太相同的。此圖的TSP問題，是一個「decision problem
」，有一個重要的條件「不超過一個事先給定的旅費數目」，只要決定任何一條
路徑，都可以很快做出「decision」是否「不超過特定值」，不需要把所有的路
徑都試完才知道答案。所以圖中的TSP問題，是一個NP-Complete問題。另外補充
，Hamilton-Cycle的一個特徵則是「每個城市間的旅費是相同的」，這個特性在
決定「是否為最少旅費」時有關鍵性的作用。
