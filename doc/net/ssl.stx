SSL/TLS/WTLS原理
================
首先要澄清一下名字的混淆：
# SSL(Secure Socket Layer)是 Netscape 公司設計的主要用於web的安全傳輸協定。
  這種協定在WEB上獲得了廣泛的應用。

# IETF 將 SSL 作了標準化，即 RFC2246 ，
  並將其稱為TLS(Transport Layer Security)，
  從技術上講，TLS1.0與SSL3.0的差別非常微小。

# 在WAP的環境下，由於手機及手持設備的處理和存儲能力有限，
  wapforum(www.wapforum.org)在TLS的基礎上做了簡化，
  提出了WTLS協定（WirelessTransportLayerSecurity），以適應無線的特殊環境。 

SSL可以用於保密的傳輸，這樣我們與webserver之間傳輸的消息便是"安全的"。
而這種"安全"究竟是怎樣實現的，最終有能實現多大程度的保密？

架構
----
SSL是一個介於HTTP協定與TCP之間的一個可選層，其位置大致如下：

table.
HTTP SSL TCP IP
==== === === ==

如果利用SSL協定來訪問網頁，其步驟如下：

# 用戶：在瀏覽器的地址欄裏輸入https://www.sslserver.com
# HTTP層：將用戶需求翻譯成HTTP請求，如 

  GET /index.htm HTTP/1.1

  Host http://www.sslserver.com

# SSL 層：借助下層協定的的通道安全的協商出一份加密密鑰，
  並用此密鑰來加密HTTP請求。

# TCP層：與webserver的443埠建立連接，傳遞SSL處理後的資料。

# 接收端與此過程相反。

SSL在TCP之上建立了一個加密通道，通過這一層的資料經過了加密，因此達到保密的效果。

SSL協定分為兩部分：

HandshakeProtocol
  HandshakeProtocol 用來協商密鑰，
  協定的大部分內容就是通信雙方如何利用它來安全的協商出一份密鑰。

RecordProtocol
  RecordProtocol則定義了傳輸的格式。

密鑰協商過程
------------
由於非對稱加密的速度比較慢，所以它一般用於密鑰交換，
雙方通過公鑰演算法協商出一份密鑰，然後通過對稱加密來通信，
當然，為了保證資料的完整性，在加密前要先經過HMAC的處理。

SSL 預設只進行server端的認證，用戶端的認證是可選的。
以下是其流程：

# SSL用戶端：在TCP鏈結建立之後，發出一個Client h*llo來發起握手 ，
  這個消息裏面包含了自己可實現的演算法列表和其他一些需要的消息，

# SSL的伺服器端會回應一個Serverh*llo，
  這裏面確定了這次通信所需要的演算法，
  然後發過去自己的證書（裏面包含了身份和自己的公鑰）。

# Client在收到這個消息後會生成一個秘密消息，用SSL伺服器的公鑰加密後傳過去，
  SSL伺服器端用自己的私鑰解密後，會話密鑰協商成功，
  雙方可以用同一份會話密鑰來通信了。

加密的計算
----------
上一步講了密鑰的協商，但是還沒有闡明是如何利用加密密鑰，
加密初始化向量和hmac的密鑰來加密消息的。
其實其過程不過如此：
# 借助hmac的密鑰，對明文的消息做安全的摘要處理，然後和明文放到一起。
# 借助加密密鑰，加密初始化向量加密上面的消息。

安全性
------
SecurityPortal在2000年底有一份文章《TheEndofSSLandSSH?》激起了很多的討論，
目前也有一些成熟的工具如dsniff（http://www.monkey.org/~dugsong/dsniff/）可以
通過maninthemiddle攻擊來截獲https的消息。

從上面的原理可知，SSL的結構是嚴謹的，問題一般出現在實際不嚴謹的應用中。
常見的攻擊就是 middleinthemiddle攻擊，它是指在A和B通信的同時，
有第三方C處於通道的中間，可以完全聽到A與B通信的消息，並可攔截，
替換和添加這些消息。

# SSL可以允許多種密鑰交換演算法，而有些演算法，
  如DH，沒有證書的概念，這樣A便無法驗證B的公鑰和身份的真實性，
  從而C可以輕易的冒充，用自己的密鑰與雙方通信，從而竊聽到別人談話的內容。
  而為了防止middleinthemiddle攻擊，應該採用有證書的密鑰交換演算法。

# 有了證書以後，如果C用自己的證書替換掉原有的證書之後，
  A的瀏覽器會彈出一個警告框進行警告，但又有多少人會注意這個警告呢？

# 由於美國密碼出口的限制，IE，netscape等瀏覽器所支援的加密強度是很弱的，
  如果只採用瀏覽器自帶的加密功能的話，理論上存在被破解可能。

代理
----
下面探討一下SSL的代理是怎樣工作的(可參見[6])。這可能與你開始想的不太一樣：）
當在瀏覽器裏設置了https的代理，而且在瀏覽器裏輸入了https://www.example.com之後，
瀏覽器會與proxy建立tcp鏈結，然後向其發出這樣一段消息：
CONNECTserver.example.com:443HTTP/1.1
Host:server.example.com:443

然後proxy會向webserver端建立tcp連接,之後，這個代理便完全成了個內容轉發裝置。瀏覽器
與webserver會建立一個安全通道，因此這個安全通道是端到端的，儘管所有的資訊流過了proxy,
但其內容proxy是無法解密和改動的（當然要由證書的支援，否則這個地方便是個maninthemiddle攻擊的好場所，見上面的討論）。

證書
----
注意，如果對於一般的應用，管理員只需生成"證書請求"（尾碼大多為.csr），
它包含你的名字和公鑰，然後把這份請求交給諸如verisign等有CA服務公司（
當然，連同幾百美金），
你的證書請求經驗證後，CA用它的私鑰簽名，形成正式的證書發還給你。
管理員再在webserver上導入這個證書就行了。如果你不想花那筆錢，
或者想瞭解一下原理，可以自己做CA。
從ca的角度講，你需要CA的私鑰和公鑰。從想要證書的伺服器角度將，需要把伺服器的證書請求交給CA.

如果你要自己做CA，別忘了用戶端需要導入CA的證書（CA的證書是自簽名的，
導入它意味著你"信任"這個CA簽署的證書）。
而商業CA的一般不用，因為它們已經內置在你的瀏覽器中了。

wtls
----
在WAP的環境中，也有安全加密的需求，因此wapforum參照在WWW世界裏最為流行的SSL協定設計了WTLS.從原理上說，這份協定與SSL是基本相同的，但在具體的地方作了許多改動。這些改動的大多沒有什麼技術上的需要，而是由於考慮到手持設備運算與存儲的局限而儘量做了簡化。不過我的感覺是這些改動意義實在不大，其獲得的計算和存儲上節省出來的時間和空間並不多。在硬體速度突飛猛進的時代，這種改動能獲得的好處也許並不很多（一個新的協定便需要大量新的投入，而且與原有體制並不相容，關於這點有文章[7]做了精彩闡述，可參看）。

這裏我簡單舉一些SSL與WTLS的差別。

1WTLS在一般udp這類不可靠通道之上工作，因此每個消息裏要有序列號，協定裏也要靠它來處理丟包，重復等情況。
此外，拒絕服務攻擊也因此變得更加容易。
2WTLS建立的安全連接是在wap閘道和手持設備之間，wap閘道和webserver之間如果也要保密，便要采再用SSL，即在這種模型中無法實現端到端的加密。

3WTLS協定里加了一種成為key_refresh的機制,當傳遞了一定數量資料包後，雙方通過同樣的演算法將自己的密鑰做一下更新。付出了很小的代價，安全性得以增強。

