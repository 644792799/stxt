SSH
---
既然 telnet 不是很安全，那麼我又需要以遠端連線服務來操控我的 Linux
主機，那麼應該怎麼辦呀！？最好的方法當然就是以較為安全的連線機制的方
案來解決連線的問題囉！那麼該如何解決這樣的問題呢？這也不難啦，使用 SSH
即可。那麼 SSH 是什麼呢？他有什麼特異功能？簡單的來說，SSH 是 Secure
SHell protocol 的簡寫，他可以經由將連線的封包加密的技術，來進行資料的
傳遞，因此，資料當然就比較安全囉！這個 SSH 可以用來取代 Internet 上面
較不安全的 finger, R Shell (rcp, rlogin, rsh 等指令), talk 及 telnet
等連線模式。底下我們將先簡介一下 SSH 的連線模式，來說明為什麼 SSH 會
比較安全呢！ 

特別注意：這個 SSH 協定，在預設的狀態中，本身就提供兩個伺服器功能： 

一個就是類似 telnet 的遠端連線使用 shell 的伺服器，亦即是俗稱的 ssh ；

另一個就是類似 FTP 服務的 sftp-server ！提供更安全的 FTP 服務。 

連線加密技術簡介： 

基本上，加密的技術通常是藉由所謂的『一對公鑰與私鑰』亦即『Public and
Private keys』來進行加密與解密的動作！如下圖所示，當 SSH 伺服器主機啟
動該服務之後，主機端會產生一支公鑰，而身為個人電腦的您 ( client 端 )，
在進行與 server 的連線時，可以藉由 Client 端隨機自行產生的私鑰來提供
server 的連線之用，也可以直接藉由 server 提供的私鑰來進行連線！這個與
進行連線時選擇的加密版本有關，等一下我們再提！ 

在上面的圖示中，我們可以知道，當資料由 Server 端傳送到 Client 端時，這
些資料會先經過『公鑰, Public Key』來進行加密的行為，所以，在傳輸的過程
中，這些資料本身是經過加密的，因此，即使這些資料在途中被截取時，要破解
這些加密的資料，還是得要花費上好長一段時間的。那麼等這些經過公鑰加密的
資料傳送到 Client 端之後，就可以藉由所謂的『私鑰, Private Key』來進行
解密的動作。需要注意的是，這些公鑰與私鑰在每一部電腦上面都不一樣，所以
，您與 Server 的連線對其他人來說，都是很難去破解的呢！那麼這些公鑰與私
鑰是如何產生的呢？底下我們來談一談目前 SSH 的兩種版本的連線模式囉！

V1 -- 每一部主機都可以使用 RSA 加密方式來產生一個 1024-bit 的 RSA Key
，這個 RSA 的加密方式，主要就是用來產生公鑰與私鑰的演算方法！這個 V1
的整個連線的加密步驟可以簡單的這麼看： 

1.每次 SSH daemon (sshd) 啟動時，產生一支 768-bit 的公鑰(server key)存
放在 Server 中；

若有 Client 端的需求傳送來時，那麼 Server 就會將這一支公鑰傳給
client ，而 Client 藉由比對本身的 RSA 加密方式來確認這一支公鑰； 

在 Client 接受這個 768-bit 的 server key 之後， Client 自己也會隨機
產生一支 256-bit 的私鑰(host key)，並且以加密的方式將 server key 與
host key 整合成一支完整的 Key，並且將這支 Key 也傳送給 server ； 

之後，Server 與 Client 在這次的連線當中，就以這一支 1024-bit 的 Key
來進行資料的傳遞！ 

當然啦，因為 Client 端每次的 256-bit 的 Key 是隨機取的，所以您這次的
連線與下次的連線的 Key 可能就會不一樣啦！ 

V2 -- 與 V1 不同的是，在 V2 當中將不再產生 server key 了，所以，當
Client 端連線到 Server 端時，兩者將藉由 Diffie-Hellman key 的演算方式
來產生一個分享的 Key ，之後兩者將藉由類似 Blowfish 的演算方式進行同步
解密的動作！

每一個 sshd 都提供這兩個版本的連線，而決定這兩種模式連線的，就必需要在
client 端連線時選擇連線的模式才能確認。目前預設情況下，會自動使用
version 2 的連線模式喔！而由於我們的連線資料中，經過了這個 Public 與
Private Key 的加密、解密動作，所以在中間的傳送過程中，當然就比較安全
的多囉！ (註：目前使用 SSH 來連線時，比較建議使用 version 2 的演算法喔
！)
