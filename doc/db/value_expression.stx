[value_expression]值表示式
--------------------------
值表示式用來表示純量，相對而言，
資料表表示式用來表示資料表」。
因此值表示式又稱為純量表示式。

表示式語法允許對值進行算術，邏輯，集合，和其它操作的運算。

值表示式用在各種語法中，
比如 select 命令的目標列資料表中，
在 insert 或 update 中用做新值，
或者在許多命令中的搜索條件中使用。 

值表示式可為下列內容：

# 常數或字面值
# 欄引用
# 紀錄表示式
# 運算式
# 函數調用
# 類型轉換
# 純量子查詢
# 統計表示式

括弧裡的值表示式，
可以用於子表示式分組和覆蓋優先級。

欄引用
~~~~~~
紀錄的欄值可以下面語法引用：

code[columnname.bnf].
correlation.columnname
::

correlation 是資料表名， 
或者是 from 子句所定義的資料表別名，

若目前查詢中所有引用資料表中，該字串名字是唯一的， 
則可省略 correlation 和分隔用的「.」。

如下式員工姓名欄引用直接取 name 而非 employees.name。

code[emp_namelist.sql].員工名單
select name 
from employees
::

紀錄表示式
~~~~~~~~~~
若表示式結果為「紀錄類型」，
可用以下語法可以取出一個指定的欄值。

code[column_selector.bnf].
expression.fieldname
::

一般紀錄表示式必須括弧， 
但若紀錄表示式為一資料表引用，可以省略圓括弧。 比如
下式為員工表的名稱欄位。

code[record_expr].
employees.name
::

運算式
~~~~~~
運算式有三種語法︰

code[op_expr.bnf]
expression operator expression (二元中序運算子)
operator expression (單元前序運算子)
expression operator (單元後序運算子)
::

operator 符號如下： 

+ - * / < > = ~ ! @ # % ^ & | ` ?

and or not 

函數調用
~~~~~~~~
函數調用是合法函數名後加上參數陣列：

code[func_call.bnf]
function ([expression [, expression ... ]] )
::

比如，下面的代碼計算 2 的平方根：

sqrt(2)

[table, buildin_function]列出內建函數。

統計表示式
~~~~~~~~~~
統計表示式表示統計函數對資料表一個查詢結果的處理。 
統計函數把多個值縮減為一值， 
比如給輸入求和或平均。

一個統計表示式的語法是下列之一：
code[statics_expr.bnf]
aggregate_name (expression)
aggregate_name (all expression)
aggregate_name (distinct expression)
aggregate_name ( * )
::
aggregate_name 是統計函數，
而 expression 是本身不包含統計表示式的任意值表示式。

第一種形式之統計表示式為所有非空值結果進行統計。 
實際上，是否忽略空值由統計函數決定，但是所有標準的統計函數都忽略它們。

第二種形式和第一種相同，因為 all 是預設值。 

第三種形式為所有唯一的非空值結果進行統計。 

最後一種形式為每個輸入值「不管空還是非空」進行一次統計；
因為沒有定義特定的輸入值。通常它只是對 count() 統計函數有用。

比如

count(*) 

為結果紀錄總數； 

count(f1)

為 f1 非空值的紀錄數； 

count(distinct f1) 為 f1 唯一非空的紀錄數。

統計表示式只能在 select 命令的欄定義或者 having 子句裡出現。
禁止在其它子句裡出現，比如 where ，
因為這些子句在上統計前計算。

若統計表示式出現在子查詢，
通常是在子查詢之結果紀錄上進行統計。

但若統計參數包含外查詢變數則有一個例外：
這個統計參數會屬於離他最近的外查詢，並且在該查詢上進行計算。

該統計表示式屬於它出現的子查詢對外層查詢的引用，
其作用相當於子查詢任何一次計算中的一個常數。
統計表示式只能出現在結果列或者 having 子句的限制適用於統計函數所屬的查詢層。

類型轉換
~~~~~~~~
類型轉換能將值的資料類型轉換到另外一種資料類型。

code[cast.bnf]
cast ( expression as type )
::

若對已知類型的值表示式轉換，
表示一個執行時類型轉換。 

若對於一個值表示式的值對類型而言不存在混淆的情況，
那麼我們可以省略明確的類型轉換「比如，在給一個資料表字串賦值的時候」；

可以用函數式語法定義一個類型轉換：

code[cast.bnf]
typename ( expression )
::
這只能用於名稱也是有效函數名稱的類型。 
比如 double precision 就不能這麼用， 
但是等效 float8 可以。

同樣，interval， time，和 timestamp 若加了雙引號也只能這麼用， 
因為存在語法衝突。
因此函數式類型轉換會導致不一致， 所以可能應該避免在新應用中這麼用。 

函數式語法實際上就是一個函數調用。
若使用兩種標準轉換語法做執行時轉換，
那麼它將在內部調用一個已註冊得函數執行轉換。
一般這種轉換函數和它們得輸出類型同名，
但是這個要點可不是那些可以移植的交易可以依賴的東西。」

純量子查詢
~~~~~~~~~~
純量子查詢是括弧的 select 查詢， 
但只傳回僅含一個欄之一筆紀錄

該 select 執行，而其傳回值可用在值表示式。 

把一個傳回超過一筆或者超過一欄的查詢用做純量查詢會引起錯誤。 

子查詢不傳回任何紀錄則結果可視為 null。

該子查詢可以引用周圍查詢的變量，
那些變量也是在計算任意子查詢時視為常數。

比如，下面的查詢找出每筆記錄與最大繳稅額的差額。
code[max_amount_payer.sql].
select payer, 
(select max(amount) from tax_payments) - amount 
from tax_payments
::

表示式計算規則
~~~~~~~~~~~~~~
子表示式的計算順序是沒有定義的，
特別要指出運算子或函數並非是按照從左向右或以某種特定的順序進行計算。

若表示式的結果只要判斷它的一部分就可得到， 
則其它子表示式就可不計算。比如：

select true or somefunc();

somefunc() 就「可能」不會調用。 

下式也如此：

select somefunc() or true;

這和程式語言裡的從左向右"短路"是不一樣的。

因此，副作用函數作為複雜表示式的一部分是不明智。
在 where 和 having 子句依賴副作用或者是計算順序是特別危險的， 
因為這些子句都是作為執行規劃的一部分而進行大量再處理。
在子句裡布爾表示式「and/or/not 的組合」
可以布爾代數運算律允許的任意方式進行識別。

若強制計算順序非常重要，則可用 case 構造。 比如，

下例避免在 where 子句裡被零除但不可信：

select ... where x <> 0 and y/x > 1.5;

但下式是安全的：

select ... where case when x <> 0 then y/x > 1.5 else false end;

用這種風格的 case 構造會阻止優化，
因此應該只在必要的時候使用。 

此例毫無疑問寫成 y > 1.5*x 更好。
