[from]
------
from 定義查詢所要引用並作處理的的資料表。

code[from.bnf]
from table_reference [, table_reference [, ...]]
::

資料表引用
~~~~~~~~~~
code[table_reference.bnf]
table_reference = basetable_name | derived_table_expression
::

資料表引用為基本資料表名稱或衍生資料表。

基本資料表
~~~~~~~~~~
最簡單的資料表引用是引用磁碟上的一個資料表，
即基本資料表。

資料表別名
~~~~~~~~~~
from 的資料表引用可給定一個臨時別名，
讓查詢其它部份可簡單引用此衍生資料表，
此別名稱為資料表別名。

別名可以是任意識別字。

要建立一個資料表別名，如下式：

from employees as e

或者

from employees as e

as 關鍵字目前沒意義。 

資料表別名的典型應用是給長資料表名賦予比較短的識別字，
好讓連接子句更好讀一些。比如：

code[emp_boss_list.sql].員工對應主管名單  
select e1.name, e2.name as boss
from employees e1 join employees e2 
     on (e1.boss_id = e2.id)
::

別名成為其原資料表引用的新名稱，
且不再能用該原資料表引用名去引用它了。
因此下式是不合法的 sql 語法。

code[alias_cover_ori.sql].
select employees.name 
from employees e
::

括弧用於解決歧義，
下式將連接的結果賦予別名 b：

select * from (masters as a cross join angles) as m

若給 join 子句附加別名，
則該別名就會隱藏 join 裡其它表名。比如

code[alias_cover_outer.sql].
select e.name
from employees e natural join angles as a
::
是合法 sql，但是

code[alias_cover_outer.sql].
select e.name
from (employees e natural join angles) as a
::
是不合法的，資料表別名 e 在外查詢是看不到的。

衍生資料表
~~~~~~~~~~
資料表引用可以各種方法修改或組合基本資料表，
其結果為衍生資料表。

衍生資料表包含子查詢，資料表連接或上述組合。

[subquery]子查詢
~~~~~~~~~~~~~~~~
子查詢就是任意的 select 語句，邏輯上代表一個暫存表。

子查詢可以使用外查詢變數，
這些變數在該子查詢的任何一次計算中視為常數。

如[emp_are_civ.sql]便引用其外查詢的表變數「e」。

定義子查詢必須括弧且賦予一個別名，如下式：

from (select * from table1) as alias_name

此例等效於下式：

from table1 as alias_name 
