值組演算(tuple calculus)
========================
0990418 

Code 為關聯式模型引入值組演算，
作為此模型之描述式資料查詢語言，
後來值組演算成為資料庫查詢語言 QUEL 及 SQL 之基礎。

雖然 SQL 很少忠於最初的關聯式模型及值組演算，
但已成為目前關聯資料庫管理系統之標準查詢語言。

除了值組演算 Code 還引入了更接近於一階邏輯之域演算，
並證明了這兩種演算及關聯式代數在表達能力上是等價的。

若關聯資料庫之查詢語言被稱為「關聯式完備性」，
則表示它們與關聯式代數在表達能力上是等價的。

值(value)
---------
值是關聯式模型表達真實世界的最小描述單位，
用來描述值組的某個屬性。

如「張簡稜剛」是一個值，
用來描述[[employees]]第 11 筆值組之 name 欄，
表示真實世界此人的姓名。

字面常數(literal)
-----------------
字面常數是模型中用來表示某項值的符號，
且此符號永遠只表示某項值，通常記為 k。

如「1」是一個常數，在模型裡永遠表示數值 1 。

如「張簡稜剛」是一個常數，在模型裡永遠表示字串值「張簡稜剛」。

域(field)
---------
域為一群值的集合，
在資料庫中通常以資料型態來表示域，
可用來定義表中某欄所允許的可能值，
所以表中同一欄具有同域的值。

資料庫存在一組符號集合 D，
其成員 d 為關聯變數可代表傳統的資料庫中的型態，

性別域包含兩個值，字元 'M' 及 'F'，
分別表示男性及女性，
對應到人的性別只有男女兩種的事實。

如關聯性 employees 中欄 gender 被性別域限制，值僅能為字元 'M' 或 'F'。

按慣例，相同域的物件必需可以相互比較。

欄(column)
----------
欄可用來取出值組中的一個值，
所有欄之集合記作 C，
類比於資料庫中的欄，

如欄 name 可取出值組中員工之姓名，
欄 gender 可取出員工之性別，
欄 title 可取出員工之職稱。

值組(tuple)
-----------
值組表示一項實體，
每一筆值組又可分為多個欄，每個欄具有一個值，
用來描述值組所代表之實體的某個屬性，
可類比為表中之一列。

如關聯性 employees 為描述員工之值組集合，
其中每筆值組具有 7 欄為:
{id, dep_id, boss_id, name, gender, title, salary}。

分別用來描述員工識別碼、部門代碼、主管員工識別碼、姓名、性別、
職稱及薪水。

值組可視為由(欄:值)對所組成，
例如 employees 第 11 筆值組可寫成如下:

{id:11, dep_id:1, boss_id:1, name:張簡稜剛, gender:M, 
title:管理師，salary:50000}

值組也可視為由以欄名為鍵值的字典，可存取值組的某一部份值，
通常記作 t:
t:C -> D, t.c = t(c)

上式之 t 為部份函數，這意指值組允許欄位為空值。
如 employees 中 id 為 8 的員工名稱為「林全碌」，
其主管員工識別碼 boss_id 為空值。

令 t 表示 employees 第 11 筆值組，
則 t.id 則會查出數值 11，t.id 即表示 t(id)。
t.name 則會查出字串值「張簡稜剛」。

值組具有定義域，其為 C 之子集，記作 dom(t)。
如 dom(t) = {id, dep_id, boss_id, name, gender, title, salary}。

在域 D 上之所有值組集合記為 TD。

值組變數(tuple variable)
------------------------
0990501

值組變數可用來代表任一值組，本章中值組變數之集合記作 V。 

值組變數之表頭可由部份函數 type : V -> 2^C 取得。

關聯性(relation)
----------------
0990501

關聯性可視為一組值組之集合，
其中每個值組具有一樣數目欄位，這些欄位集稱為表頭，
為 C 之子集。

如關聯性[[employees]]就是用來描述人的關聯性。

上述關聯性中每一筆值組描述一位員工，
值組中每個欄位之植描述員工一項性質， 
如欄位  name 描述員工之姓名，
欄位 gender 描述員工之性別，
欄位  title 描述員工之職稱。

table.employees
id dep_id boss_id name     gender title    salary
== ====== ======= ======== ====== ======== ======
 1      1       8 廖美慧   F      科長      80000
 2      1       1 陳文靈   F      稅務員    60000
 3      1       1 金叔分   F      約僱人員  30000
 4      2       8 吳美央   F      主任      77000
 5      2       4 賴力密   F      股長      70000
 6      2       4 賴怡君   F      科員      45000
 7      2       4 洪慧貞   F      科員      53000
 8      3    null 林全碌   M      局長     100000
 9      4      10 黃志強   M      科員      45000
10      4       8 徐德誠   M      股長      70000
11      1       1 張簡稜剛 M      管理師    50000
== ====== ======= ======== ====== ======== ======

在關聯式模型中，關聯性為資料操作之基本元素。

關聯變數(relation variable)
---------------------------
0990501

關聯變數在值組演算中用來代表任一關聯性，
本章中關聯變數之集合記作 R， 
值組演算利用關聯變數來取得關聯性之表頭及值組集合。

表頭函數用來取得關聯變數代表之關聯性之表頭，記作 h：
h : R -> 2^C

若 E 為代表關聯性 employees 之變數，
則 h(E) 應該為 
{id, dep_id, boss_id, name, gender, title, salary}。

表格函數用來取得關聯變數代表之關聯性之值組集合，
並要求集合中所有值組都應該包含同樣表頭，記作 db:
db : R -> 2^TD | dom(t) = h(r), t in 2^TD and r in R.

同樣的 db(E) 取出之值組集合如下:

table[employees]

關聯資料庫模型
--------------
關聯資料庫模型為三值組 S = (D, R, h)，
其中 D 為域，R 是關聯變數集合而 h 為表頭函數。

項(Term)
---------
項為無法再分解之公式，所有項集合記為 A[S, type]。

此集合利用以下規則歸納定義:

1.v.a = w.b 為項，
  其中 v 和 w 在 V 中，a 在 type(v) 中，而 b 在 type(w) 中，
  此式用來表示兩關聯某一屬性值相等。

2.v.a = k 為項，
  其中 v 在 V 中，a 在 type(v) 中且 k 在 D 中，
  此式用來表示關聯 v 之屬性 a 之值等於 k，
  其中 k 為字面常數。

3.r(v) 為項，
  其中 v 在 V 中，r 在 R 中而 type(v) = h(r)，
  此式用來表示 v 所代表示之值組在關聯性 r 中。

下面介紹一些項之範例。

t.age = s.age: 
  上式表示 t 有一個 age 屬性且 s 也有一個 age 屬性，
  兩者具有相同之值。

t.name = "張簡稜剛":
  上式表示值組 t 有一個 name 屬性且值為 "張簡稜剛"。

employees(t):
  上式表示值組 t 存在於關聯性 employees 中。

項語義(term semantic)
---------------------
0990501

項之形式語義透過 val : V -> TD 定義，
val 將值組變數對應到某個值組。

此函數定義如下:

1.val(v).a = val(w).b <=> v.a = w.b

2.val(v)(a) = k <=> val(v.a = k) 

3.r(v) <=> val(v) in db(r)

公式(formula)
-------------
值組演算之公式同一階邏輯之文法，
可用邏輯算子合取(and)、析取(or)及否定(not)來將項組合成公式及
利用存在量詞(EE)和全稱量詞(FF)來限定變數，
所有公式之集合記作 F[s, type]

此集合利用以下規則歸納定義:

1.項為公式，
  此規則點出項為公式之基礎。

2.若 f1 和 f2 為公式，則 f1 and f2 也為公式。

3.若 f1 和 f2 為公式，則 f1 or f2 也為公式。

4.若 f 為公式，則 not f 也為公式。

5.若 f 為公式，v 為變數，H 為表頭，
  則 EE v:H (f) 也為公式。

6.若 f 為公式，v 為變數，H 為表頭，
  則 AA v:H (f) 也為公式。

下面介紹一些公式之範例。

t.name = "張簡稜剛":
  上式表示值組 t 有一個 name 屬性且值為 "張簡稜剛"。

t.name = "張簡稜剛" and t.title = "管理師":
  上式表示值組 t 有一個 name 屬性且值為 "張簡稜剛"，
  有一個 title 屬性且值為 "管理師"。

book(t) or magazine(t)

code.noname
AA t:{author, title, subject}
    (not (Book(t) and t.author = "C.J.Date" 
    and not (t.subject="Relational Model")))
::

最後公式是表示 C.J.Date 所寫的書主題都為關聯式模型。
在意義明確下，通常省略圓括號。

公式語義(formula semantic)
--------------------------
量詞其範圍為所有值組。

公式之形式語義可由下式給定：
  val : v -> td

1.val(f1), val(f2) <=> val(f1 and f2) 
2.val(f1) or val(f2) <=> val(f1 or f2)
3.val(f) = False <=> val(not f)
4.若且唯若存在一個值組 t 使得 dom(t)=H，
  且公式 f 對於 val[v->t] 為真，則 EE v:H (f) 為真。
  
  換句話說，設 t 代表之值組集合為:
  {t1, t2,..., tn}
 
  則下式為真:
  EE v:H (f) <=> True or f(t1) or f(t2)... or f(tn)

  其中 f(t1) 表示將 f 中的 v 置換成 t1。 
  
5.若且唯若對於所有值組 t 使得 dom(t)=H，
  AA v:H(f) 為真，並且公式 f 對於 val[v->t] 為真。

  簡單而言，設 t 代表之值組集合為:
  {t1, t2,..., tn}
 
  則下式相等:
  AA v:H (f) <=> False and f(t1) and f(t2)... and f(tn)

查詢(Query)
-----------
值組關聯模型之查詢為以下形式:
  {v:H | f(v)}

此查詢結果為所有滿足表頭為 H 且使 f(v) 為真之值組集合。

形式定義為:
dom(t)=H 且 f 對於 db 為真且 val={(v, t)} 之值組集合。

v 為值組變數、H 為表頭且 f(v) 為 F[s, type] 中之公式，
type = {(v, H)}，表示 v 之表頭為 H。

查詢表達式的例子如下。

code.查詢薪水為 50 美金員工姓名之值組
{v:{name}|EE s:{name, wage}(Employee(s) and s.wage=50.000 
                                        and t.name = s.name)}
::
上式查詢其結果為薪水為 50 美金員工姓名。

code.查詢文章名及作者之配對
{v:{supplier, article} | 
    EE s:{s#, sname} 
       (Supplier(s) and s.sname = t.supplier and
        EE p:{p#, pname}(Product(p) and p.pname = t.article and
        EE a:{s#, p#} (Supplies(a) and s.s# = a.s# and a.p# = p.p#)}
::
上式查詢其結果文章名之作者清單。

域獨立查詢
~~~~~~~~~~
量詞語義其範圍僅限於模型中之所有值組，
若另一模型其定義域不同，則同查詢可能傳回不同結果。

非域獨立查詢
~~~~~~~~~~~~
例如考慮兩個模型 S1 = (D1, R, h) 及 S2 = (D2, R, h)，
其中 D1 = {1}, D2 = {1, 2}, R = {"r1"}, h = {("r1", {"a"})}。

設兩個模型有一個共用之值組函數如下:

db = {("r1", {("a", 1)})}

則以下之查詢表達式 {t:{a}|t.a = t.a}
在 S1 下查詢結果為 {(a:1)}，而 S2 下之查詢結果為 {(a:1), (a:2)}。

很明顯若域為無限集合，則上述查詢結果也是無限的。

作用域(active domain)
~~~~~~~~~~~~~~~~~~~~~
所有至少出現在關連性或查詢中值組集中之值稱為作用域，
其為域之子集。

域獨立查詢
~~~~~~~~~~
域獨立查詢指查詢值組之域定義為作用域，
則查詢可獨立於域傳回相同結果。

事實上，在很多值組演算的定義中，量詞語義就是這麼定義的，
這使得定義的所有查詢都是域獨立。

安全查詢(safe query)
--------------------
0990503

為了限制查詢表達式使它們都為域獨立，
通常引入一個語法概念「安全查詢」。

要決定查詢是否安全，可由分析查詢以下兩項性質決定:
1.變數屬性對 t.a 是否只綁定到一個關聯或一個常數上。
2.兩個變數屬性對是否直接或間接相等，記作 t.v == s.w。

綁定性
~~~~~~
綁定性由以下推理規則定之:

1.v.a = w.b: 
  沒有綁定任何變數屬性對。

2.v.a = k: 
  v.a 被綁定。

3.r(v): 
  v.a 被綁定於 type(v) 中的 a。

4.f1 or f2:
  f1 及 f2 中所有變數屬性對都被綁定。

5.f1 and f2:
  變數屬性對在 f1 和 f2 二者都出現才算被綁定。

6.not f:
  沒有綁定任何變數屬性對。

7.EE v:H (f):
  w.a 被綁定，若它被綁定在 f 中並且 w <> v 。

8.AA v:H (f):
  w.a 被綁定，若它在 f 中被綁定並且 w <> v。

相等性
~~~~~~
0990502

相等性包含等價性推理規則，自反性、對稱性和傳遞性及以下推理規則定之:

1.v.a = w.b:
  v.a == w.b 成立。

2.v.a = k:
  沒有變數屬性對相等。

3.r(V):
  沒有變數屬性對相等。

4.f1 or f2:
  v.a == w.b 成立，若它在 f1 中或在 f2 中成立。

5.f1 and f2:
  v.a == w.b 成立，若它在 f1 中和在 f2 中都成立。

6.not f:
  沒有變數屬性對相等。

7.EE v:H (f):
  w.a == x.b 成立，若它在 f 中成立且 w<>v 及 x<>v。

8.AA v:H (f):
  w.a == x.b 成立，若它在 f 中成立且 w<>v 及 x<>v。

安全查詢
~~~~~~~~
0990502

查詢 { v:H | f(v) } 是安全的，具有下述條件:

1.若對於所有 H 中的欄名 a，可以得出 v.a 等於一個 f 中的綁定對。  

2.對於所有 f 的子表達式 AA w:G ( g )， 
  可以得出對於所有 G 中之欄名 a 使得 w.a 等於一個 g 中的綁定對。

3.對於所有 f 的子表達式 EE w:G ( g )， 
  可以得出對於所有 G 中之欄名 a 使得 w.a 等於一個 g 中的綁定對。

域獨立查詢轉成安全查詢
~~~~~~~~~~~~~~~~~~~~~~
0990502

由下述定理得知安全查詢並不限制表達能力。

theorem.安全查詢表達定理
  所有域獨立查詢都可以轉成等效之安全查詢，
  故安全查詢不限制表達能力。
proof.
  對於模型 S = (D, R, h)，
  給定在這個查詢表示式中常數的集合 K，
  值組變數 v 和表頭 H，可以為所有值在活躍域之 v.a 構造一個安全公式，
  其中 a 在 H 中。

假定 
1.K = {1,2}
2.R = {"r"}
3.h = { <"r", {"a, "b"}> } 

則 v.b 之安全公式為:

v.b = 1 or v.b = 2 or EE w ( r(w) and ( v.b = w.a or v.b = w.b ) )

透過上式，可將所有 v.a 代換成上式，
來將不安全查詢重寫為等價之安全查詢。

以上程序有效地使所有變數都取值於活躍域上，
此查詢一定為域獨立。
