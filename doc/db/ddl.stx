[ddl]資料定義語言
-----------------
建立表
~~~~~~
表是資料庫中儲存資料的基本架構。
分為欄(column)及紀錄(row)。
每一紀錄代表一筆紀錄，而每一欄代表一筆紀錄的一部份。

舉例來說，如果我們有一個記載顧客資料的表，
那欄就有可能包括姓、名、地址、城市、國家、 生日等等。
所以定義表時，需要註明欄的標題，
以及那個欄的資料類型。

資料類型是什麼呢？就是所謂的型態，定義了某個欄所允許的可能值，
詳請參見[domain_integrity]。
建立上面提過的顧客表的 sql，如[create_table]_所示。

code.create table
create table customers
(first_name char(50),
 last_name char(50),
 address char(50),
 city char(50),
 country char(25),
 birth_date date) 
::

更改欄定義
~~~~~~~~~~
alter column 可更改欄定義，
但語法限制一次只能更改一個，
並不像 create table 有欄清單。

code.更改欄定義
alter table customers
alter column city char(50);
::

刪除表欄
~~~~~~~~
刪除表 customers 的欄 city 須用 alter table ，
如[drop_column]_所示。

code.drop column
alter table customers
            drop column(city);
::

定義完整性
~~~~~~~~~~
如[relational_integrity]_所述，
完整性是確保資料正確性的方法，
完整性包含在表定義中，
完整性限制可以在表藉由 create table 語句來指定，
或是之後藉由 alter table 語句來指定。

常見的限制有以下幾種：
* primary key 
* foreign key
* not null
* unique
* check

primary key
~~~~~~~~~~~
primary key 用來定義主鍵，請參見[primary_key]。

我們可以運用 create table 於建置新表時設定主鍵，
如[create_primary_key]所示

code.create primary key
create table customer 
(id integer, 
last_name varchar(30), 
first_name varchar(30), 
primary key (id));
::

以下則是以 alter table 來設定主鍵的方式：

code.alter primary key
alter table customer add primary key (id);
::

請注意，在用 alter table 來添加主鍵之前，
我們需要交付被用來當做主鍵的欄是設定為 not null，
也就是說，那個欄一定不能沒有資料。 

foreign key
~~~~~~~~~~~
foreign key 用來定義參考完整性，
請參見[s_referntial_integrity]_。

假設有兩個表：
一個 customer 表，
裡面記錄了所有顧客的資料；
另一個 orders 表，裡面記錄了所有顧客訂購的資料。
在這裡的一個限制，就是所有的訂購資料中的顧客，
都一定是要跟在 customer 表中存在。
在這裡，我們就會在 orders 表中設定一個外鍵，
而這個外鍵是指向 customer 表中的主鍵。
這樣一來，我們就可以確定所有在 orders 表中的顧客都存在 customer 表中。
換句話說，orders表之中，不能有任何顧客是不存在於 customer 表中的資料。

我們可以在 create table 語法指定外鍵，
如[alter_foreign_key]_所示，
orders 表中的 customer_id 欄是一個指向 customers 表中 id 欄的外鍵。

code.create foreign key
create table orders 
(order_id integer, 
order_date date, 
customer_sid integer, 
amount double, 
primary key (order_id), 
foreign key (customer_id) references customer(id));
::

假設 orders 表已經被建置，但外鍵尚未被指定，
則可利用 alter table 來指定外鍵，如 [alter_foreign_key] 所示。

code.alter foreign key
alter table orders 
add foreign key (customer_id) references customer(id);
::

not null
~~~~~~~~
一個欄預設是允許有 null，
如果不允許一個欄含有 null，
就需要對那個欄做出 not null 的指定。

code.not null
create table customer 
(id integer not null, 
last_name varchar (30) not null, 
first_name varchar(30));
::

如[not_null]_指出 id 和 last_name 不允許有 null，
而 first_name 可以有 null。

請注意，一個被指定為主鍵的欄也一定會含有 not null 的特性。
相對來說，一個 not null 的欄並不一定會是一個主鍵。

unique
~~~~~~
unique 限制是保證一個欄沒有重複值。

code.unique
create table customer 
(id integer unique, 
last_name varchar (30), 
first_name varchar(30));
::

如[unique]_指出
id 欄不能有重複值存在，
而 last_name 及 first_name 這兩個欄則是允許有重複值存在。

請注意，一個被指定為主鍵的欄也一定會含有 unique 的特性。
相對來說，一個 unique 的欄並不一定會是一個主鍵。

check
~~~~~
check 限制是保證一個欄中的所有資料都是符合某些條件。

code.check
create table customer 
(id integer check (id > 0), 
last_name varchar (30), 
first_name varchar(30));
::

id 欄只能包含大於 0 的整數。

許多系統並未實作 check，例如 MySQL 資料庫上。
