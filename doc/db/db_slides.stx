條件式 
======
SQL 的查詢
----------
講師：張簡稜剛

日期：20091211

select
--------
從資料庫中檢索資料的過程或命令稱為查詢。 
主要是使用 select 命令來定義查詢，
select 命令建立一個暫時虛擬表。

定義顯示表頭
------------
code.select 語法
select *
from table_expression
::
最簡單表頭定義的是 *，
表頭定義中 * 意指表頭為代表 from 資料表表示式所有欄。
表頭定義也可選擇可用欄子集或者在檢索它們之前對欄值進行計算；

選出員工檔全部欄
----------------
code[select_star.sql].選出員工檔全部欄
select * 
from employees
::
假設一個資料表稱為employees，
這條命令將從 employees 中檢索所有紀錄和欄。 

from 定義查詢所要引用並作處理的的資料表，
資料表引用可以是基本資料表，連接及子查詢的複雜構造。

from employees 是最簡單的資料表表示式，
它只讀取了一個資料表 employees。

欄名引用
--------
code.select 語法
select c1, c2, ...
from table_expression
::
另一種用逗號分隔的欄名陣列來定義表頭，
每個欄名為 from 子句定義資料表中實際欄名或別名。。

是本局辦理研習時，
要產出所有員工的簽到表可以[emp_namelist.sql]表示，
此 sql 表示員工表取出所有員工名稱組成新的表。

表名引用
--------
code.select 語法
select t1.c1, t2.c2, ...
from table_expression
::

若超過一個資料表有相同欄名，那麼還必須指定表名或表別名。

code[emp_namelist.sql].員工部門名單
select e.name, d.name dep
from employees e join departments d on e.dep_id = d.id
::

值表示式
--------
值表示式會為結果表每一筆紀錄進行一次計算，
計算之前用該欄的數值代換任何值表示式裡引用的欄名。 

下式表示各人出生年份。

code[birth_year.sql].各人出生年份
select name, substr(birthday, 0, 4) as year 
from humans
::

每位員工月薪為幾美金
--------------------
比如若 employees 表頭有 name 和 salary 的欄，
分別代表員工名稱及月薪，
則下式表每位員工月薪為幾美金：

code[salary_in_dollar.sql].每位員工月薪為幾美金
select name, salary / 34 
from employees;
::

常數引用
--------
值表示式的並不一定要有引用來自 from 子句中表表示式裡面的表的欄名， 
可以有任意常數。

下式產出同員工筆數的體溫正常及不正常標籤，可拿來作門禁用。

code[temp_tag.sql].體溫標籤
select 'normal', 'fever'
from employees
::

可以省略值表示式而用 select 命令當做一個計算器：

code[select_no_from.sql].
select 3 * 4;
::

函數引用
--------
表頭定義裡的表示式也可為函數，
比如，可以呼叫函數 random()：

code[select_random.sql].
select random();
::

別名
----
code.語法
name [as] alias
::
其中 name 為欄名，alias 為欄的別名，as 可加可不加。

下式將職稱姓名欄別名為 name_title。

code[name_title_list.sql].職稱姓名表
select name || title as name_title
from employees
::

查詢表頭欄名和在 from 子句裡的欄名是不同。 

預設欄名
--------
若表頭未定義欄別名，則系統會賦予預設值。
對欄值引用， 預設是欄名。
對於函數調用，預設是函數名。
對於複雜表示式，系統應生成一個通用名。

對[select_no_from.sql]會產出下表，欄名為表示式文字表示。

table[select_no_from].
3 * 4
=====
   12
=====

distinct
--------
若兩筆紀錄裡至少有一欄值不同，
則此兩筆紀錄為相異，否則為相同。

若於 select 後加入 distinct 修飾，則合併相同紀錄。

列出本局人員具有的職稱。

code[title_list.sql].本局人員職稱列表
select distinct title
from employees
::

相對 distinct 是 all，因它是預設值，所以通常不寫。

兩個空值認為是相同的。

from
----
from 定義查詢所要引用並作處理的的資料表。

code[from.bnf]
from table_reference [, table_reference [, ...]]
::

資料表引用
----------
code[table_reference.bnf]
table_reference = basetable_name | derived_table_expression
::

資料表引用為基本資料表名稱或衍生資料表。

基本資料表
----------
最簡單的資料表引用是引用磁碟上的一個資料表，
即基本資料表。

資料表別名
----------
from 的資料表引用可給定一個臨時別名，
讓查詢其它部份可簡單引用此衍生資料表，
此別名稱為資料表別名。

別名可以是任意識別字。

要建立一個資料表別名，如下式：

from employees as e

或者

from employees as e

as 關鍵字目前沒意義。 

員工對應主管名單
----------------
資料表別名的典型應用是給長資料表名賦予比較短的識別字，
好讓連接子句更好讀一些。比如：

code[emp_boss_list.sql].員工對應主管名單  
select e1.name, e2.name as boss
from employees e1 join employees e2 
     on (e1.boss_id = e2.id)
::

別名覆蓋原名
------------
別名成為其原資料表引用的新名稱，
且不再能用該原資料表引用名去引用它了。
因此下式是不合法的 sql 語法。

code[alias_cover_ori.sql].
select employees.name 
from employees e
::

括弧用於解決歧義，
下式將連接的結果賦予別名 b：

select * from (masters as a cross join angles) as m

若給 join 子句附加別名，
則該別名就會隱藏 join 裡其它表名。比如

code[alias_cover_outer.sql].
select e.name
from employees e natural join angles as a
::

是合法 sql，但是下式：

code[alias_cover_outer.sql].
select e.name
from (employees e natural join angles) as a
::
是不合法的，資料表別名 e 在外查詢是看不到的。

衍生資料表
----------
資料表引用可以各種方法修改或組合基本資料表，
其結果為衍生資料表。

衍生資料表包含子查詢，資料表連接或上述組合。

子查詢
------
子查詢就是任意的 select 語句，邏輯上代表一個暫存表。

子查詢可以使用外查詢變數，
這些變數在該子查詢的任何一次計算中視為常數。

如[emp_are_civ.sql]便引用其外查詢的表變數「e」。

定義子查詢必須括弧且賦予一個別名，如下式：

from (select * from table1) as alias_name

此例等效於下式：

from table1 as alias_name 

join
----
資料表引用可串接不同的資料表形成一個暫時的衍生資料表，
串接共分成以下幾種：
* cross join
* inner join
* natural join
* left join
* right join
* full join

cross join
----------
code.語法
t1 cross join t2
::
cross join 即為關連式代數的積，
將 t1 和 t2 組合成新資料表，
新資料表中每筆紀錄包含 t1 所有欄位於後加上 t2 所有欄位。

如果兩資料表分別有 n 和 m 筆紀錄，連接後資料表將有 n * m 筆紀錄。

matches.sql
-----------
[matches.alg]對應的 SQL 如下：

code[matches.sql].
select a.name angle, m.name master
from angles a cross join masters m
::

多資料表積
----------
code[matches.bnf].
from t1[, t2, t3]
::

若資料表引用以逗號分隔字串定義多個資料表， 
則資料表會依序以 cross join 形成一個衍生資料表，
所以下式：

from t1 cross join t2 

等效於下式：

from t1, t2

故 [matches.sql] 可改寫成如下：

code[matches_comman.sql].
select a.name angle, m.name master
from angles a, masters m
::

以 inner join 表達 cross join
------------------------------
它還等效於下式條件連接：

from t1 inner join t2 on true。

故 [matches.sql] 可改寫成如下：

code[matches_comman.sql].
select a.name angle, m.name master
from angles a inner join masters m on true
::

連接條件
--------
join 連接條件可使用 on, using 及 natural 定義。

連接條件判斷來自兩個源資料表中的那些紀錄配對一起。

若兩個分別來自 t1 和 t2 的紀錄符合連接條件，
則這兩筆紀錄配對在一起。

on 
--
code.語法
t1 join t2 on boolean_expression
::
on 子句是最常見的連接條件的類型，
它使用和 where 子句相同的謂詞表示式來定義連接條件，
如下例：

code[emp_boss_list.sql]

using 
-----
code[using.bnf].語法
t1 join t2 using ( c1, c2, ... )
::
using 利用逗號分隔字串定義一組連接欄名組， 
連接欄名組的所有欄名必須是兩個連接資料表所共有，
具各表的配對紀錄的連接欄名組其值必須相同，
最後結果表之表頭為連接欄名組加上各個資料表的所有其它欄位。 

由上述操作定義可知下式：

using (a, b, c) 

等效於 

on (t1.a = t2.a and t1.b = t2.b and t1.c = t2.c) 
    
但若用 on 定義則結果表頭會有重覆連接欄名組(a, b, c)， 
而用 using 則結果表頭只會有一組連接欄名組(a, b, c)。

code[emp_angle.sql].員工有參加聯誼活動名單
select * 
from employees e join angles using(name)
::

natural
-------
code[natural_join.bnf].語法
t1 natural join t2
::

natural 是 using 的簡寫形式，
它會轉成一組 using 之連接欄名組，
其由兩個連接資料表都出現了的欄名組成。
同 using，結果表頭只會有一組連接欄名組(a, b, c)。

code[emp_angle_natural.sql].員工有參加聯誼活動名單
select * 
from employees e natural join angles
::

連接類型
--------
SQL 的連接類型如下列：

* inner join
* natural join
* left join
* right join
* full join

所有 join 類型都可為 inner 和 outer。

預設連接類型是 inner，但 left，right，和 full 預設類型為 outer。

inner join
----------
code.語法
t1 [inner] join t2 on boolean_expression
::
連接條件判斷來自兩個源資料表中的那些紀錄配對一起。

若兩個分別來自 t1 和 t2 的紀錄符合連接條件，
則這兩筆紀錄配對在一起成為連接紀錄。

如下例：

code[emp_boss_list.sql]

outer join
----------
inner join 要符合連接條件的資料才會被選出。
如果想要某表中每一筆的資料，即使它的值在另一個表中有沒有出現，
那該怎麼辦呢？這時就需用到 outer join 的指令。

outer join 是作用在兩個表上的運算子，
其將表分成主表及副表，
原本相等合併除去所有不滿足合併條件的紀錄，
而外部合併則保留主表的所有紀錄，

若沒有副表的紀錄則副表的欄設為 null 值。

左外部合併運算子其左方表的是主表，右方表為副表；

右外部合併運算子其右方表的是主表，左方表為副表。

left outer join
---------------
code.語法
t1 left outer join t2 on boolean_expression
::
先執行一次內連接，
然後為 t1 不滿足連接條件的紀錄傳回一個連接紀錄， 
該連接紀錄裡對應 t2 的紀錄用空值補齊。

因此產出的連接資料表裡無條件地至少包含來自 t1 裡的每一筆紀錄。

code[emp_boss_list.sql].員工對應主管名單（含無主管員工） 
select e1.name, e2.name as boss
from employees e1 left join employees e2 
     on (e1.boss_id = e2.id)
::

right outer join
----------------
code.語法
t1 right outer join t2 on boolean_expression
::
先執行一次內連接，
然後為 t2 不滿足連接條件的紀錄傳回一個連接紀錄， 
該連接紀錄裡對應 t1 的紀錄用空值補齊。

因此產出的連接資料表裡無條件地至少包含來自 t2 裡的每一筆紀錄。

code[emp_boss_list_right.sql].員工對應主管名單（含無主管員工） 
select e1.name as boss, e2.name
from employees e1 right join employees e2 
     on (e1.id = e2.boss_id)
::

full outer join
---------------
code.語法
t1 full outer join t2 on boolean_expression
::
先執行一次左連接，再執行一次右連接，
因此產出的連接資料表裡無條件地至少包含來自 t2 及 t1 的每一筆紀錄。

套疊連接
--------
由於連接接受兩個資料表並傳回一個連接資料表，
故所有類型的連接都可相互套疊，
並能用括弧來控制連接順序，如下式：

from (t1 join t2) join t3

t1, t2 先連接後的結果表再與 t3 連接。

左連結性
--------
join 是左連結性，所以若沒有括弧，則 join 子句是從左向右套疊。
故下式：

from t1 join t2 join t3

等同於下式：

from (t1 join t2) join t3
