[numeric]數值類型
-----------------
由2、4或8字元的整數以及4或8字元的浮點數和可選精度小數組成。 

table[numeric_types].數值類型
名稱             儲存空間 描述               範圍
================ ======== ================== ==========================
numeric          變長     用戶聲明精度，精確    無限制
decimal          變長     用戶聲明精度，精確    無限制
integer          4 字元   常用的整數         -2147483648 到 +2147483647
smallint         2 字元   小範圍整數         -32768 到 +32767
float
real             4 字元   變精度，不精確     6 位十進制數字精度
double precision 8 字元   變精度，不精確     15 位十進制數字精度
================ ======== ================== ==========================

整數類型
~~~~~~~~
類型 smallint 和 integer 儲存整數。
試圖儲存小數部分數值將導致錯誤。

常用類型是 integer，它提供範圍、儲存空間和性能之間的最佳平衡。
一般只有在磁盤空間緊張的時候才使用 smallint。

任意精度數值
~~~~~~~~~~~~
類型 numeric 可以儲存最多1000位精度的數字並且準確地進行計算。 
用於貨幣金額和其它要求計算準確的數量。

不過，numeric 類型上的算術運算比整數類型或浮點數類型要慢很多。

在隨後的內容裡，我們使用了下述術語：
一個 numeric 的比例是到小數點右邊為止小數部分的位數，任何整數的比例為零。
numeric 的精度是整個數字裡全部數字數目，也就是小數點兩邊的資料數目。 

例如數字 23.5141 的精度為6而比例為4，

numeric 字串的最大精度和最大比例都是可以配置的。
要聲明一個類型為 numeric 的字串，您可以用下面的語法

NUMERIC(precision, scale)

精度必須為正數，比例可以為零或者正數。

NUMERIC(precision)

預設比例為 0。

NUMERIC

不帶任何精度或者比例聲明
建立可以儲存直到實現精度上限的任意精度和比例的數值， 
一個這樣類型的字串將不會把輸入數值轉化成任何特定的比例，
而帶有比例聲明的 numeric 字串將把輸入值轉化為該比例。 
（SQL標準要求預設的比例是 0。也就是轉化成整數精度。 
我們覺得這樣做有點沒用。如果您關心移植性，那您最好總是明確聲明精度和比例。）

如果一個要儲存的數值的比例比字串聲明的比例高， 那麼系統將嘗試圓整該數值到指定的小數位。 然後，如果小數點左邊的資料位數超過了聲明的精度減去聲明的比例， 那麼拋出一個錯誤。

數值資料值實際上是不帶任何前導或者後綴零的形式儲存的。 因此，字串上聲明的精度和比例都是最大值，而不是固定分配的。 （在這個方面，numeric 類型更類似於 varchar(n)， 而不像 char(n)。）

除了普通的數字值之外，numeric 類型允許特殊值 NaN， 資料表示"不是一個數字"。任何在 NaN 上面的操作都生成另外一個 NaN。 如果在 SQL 命令裡把這些值當作一個常量寫，您必須在其周圍放上單引號，比如 UPDATE table SET x = 'NaN'。在輸入時，字串 NaN 當作大小寫無關看待。

類型 decimal 和 numeric 是等效的。 兩種類型都是SQL標準。

浮點數類型
~~~~~~~~~~
資料類型 real 和 double precision 是不準確的，變精度的數字類型。
實際上，這些類型是 IEEE 標準 754 二進制浮點數算術（分別對應單和雙精度）的一般實現，
外加下層處理器，操作系統和編譯器對它的支援。

不準確意味著一些數值不能準確地轉換成內部格式並且是以近似的形式儲存的，
因此儲存然後把資料再打印出來可能顯示一些缺失。
處理這些錯誤以及這些錯誤是如何在計算中傳播的屬於數學和計算機科學的一個完整的分支，
我們不會在這裡進一步討論它，這裡的討論僅限於如下幾點：

如果您要求準確的計算（比如計算貨幣金額），應使用 numeric 類型。

如果您想用這些類型類型做任何重要的複雜計算，尤其是那些您對範圍情況（無窮，下溢）嚴重依賴的事情，那您應該仔細評詁您的實現。

拿兩個浮點數值進行相等性比較可能像，也可能不像想像那樣運轉。

通常，real 類型的範圍是至少 -1E+37 到 +1E+37， 精度至少是 6 位小數。double precision 類型通常有 -1E+308 到 +1E+308 的範圍，精度是至少 15 位數字。太大或者太小的數值都會導致錯誤。 如果輸入資料太高，那麼可能發生園整。太接近零的數字，如果無法與零值的資料表現形式相區分就會產生下溢錯。

除了普通的數字值之外，浮點類型還有幾個特殊值：

#.Infinity
#.-Infinity
#.NaN

這些值分別資料表示 IEEE 754 特殊值"正無窮大"，"負無窮大"， 以及"不是一個數字"。
（在不遵循 IEEE 754 浮點算術的機器上，這些值的含義可能不是預期的。） 
如果在 SQL 命令裡把這些數值當作常量寫，您必須在它們周圍放上單引號，
像這樣 UPDATE table SET x = 'Infinity'。
輸入時，這些值是以大小寫無關的方式識別的。
PostgreSQL 還支援 SQL 標準資料表示法 float 和 float(p) 用於聲明非精確的數值類型。
在這裡，p 聲明以二進制位資料表示的最低可接受精度。 
在選取 real 類型的時候，PostgreSQL 接受 float(1) 到 float(24)，
在選取 double precision 的時候，接受 float(25) 到 float(53)。
在允許範圍之外的 p 值將導致一個錯誤。 沒有聲明精度的 float 將被當作是 double precision。

注意: 在 PostgreSQL 7.4 以前，在 float(p) 裡面的精度會被當作是這麼多位數的十進制位。到 7.4 已經被修改成與 SQL 標準匹配，標準聲明這個精度是以二進制位度量的。假設 real 和 double precision 分別有 24 和 53 個二進制位的位數對 IEEE 標準的浮點實現來說是正確的。 在非 IEEE 平台上，這個數值可能略有偏差，但是為了簡化，我們在所有平台上都用了同樣的 p 值範圍。
