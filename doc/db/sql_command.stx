[sql_program]sql 程式
---------------------
sql 程式由一串命令組成。

命令
~~~~
命令是由一串字構成，
分號 ";" 或輸入流終止表示結束一條命令。

字必須遵守命令的語法。

字
~~
字可分成關鍵字、識別字、引號包圍的識別字、常數及符號。 

字通常由空白分隔，空白包含空格、tab及換行字元，
但若不混淆也可以省略空白，
通常是符號與字相連時。

另外，在 sql 輸入裡可以有註釋。 
它們不是符號，它們實際上等效於空白。

比如，下列命令是 sql 程式：
code[sql_commands.sql] 程式：
select * from my_table;
update my_table set a = 5;
insert into my_table values (3, 'hi there');
::

上述程式有三條命令。

若從區分哪些字命令名稱，哪些是參數的角度考慮，
sql 語法並不是非常一致。

通常第一字是命令名稱， 
因此上例可說是一 select 命令， 一 update 命令，和一 insert 命令的程式。
不過， update 命令總要有 set 在某個位置出現，
並且變體的 insert 要有 values 才完整。

識別字和關鍵字
~~~~~~~~~~~~~~
如上例 select, update 或 values 等字都是關鍵字，
關鍵字就是在 sql 語言裡有固定含義之字。 

my_table 和 a 是識別字。 
根據命令不同，它們表示資料表，字串，或者其它資料庫物件的名字。

關鍵字和識別字有同樣的詞法，
意思是若不知道輸入程式為 sql 程式前，無法區分一個字是識別字還是名字。
sql 所有關鍵字表在[table,keyword]。

sql 識別字和關鍵字必須以一個字母或底線開頭 "_" 開頭。
識別字和關鍵字裡隨後的字元可以是字母，數字，或者底線，
但 sql 標準不會定義包含數字或者以底線開頭或結尾的關鍵字。

識別字和關鍵字都是不區分大小寫。

因此

UPDATE MY_TABLE SET A = 5;

也可以等效地寫成

update my_table set a = 5;

分隔識別字 
~~~~~~~~~~
第二種識別字：分隔識別字或引號包圍的識別字。
它是透過在雙引號「"」裡包圍任意字串形成的。
分隔識別字一定為識別字，而不是關鍵字。

因此可用 "select" 表示一個字串或者名稱為 "select" 的資料表，
而一個沒有引號的 select 將被當做命令的一部分，
因此若把它當做一個資料表的名字或者字串名字用的話就會產生一個分析錯誤。
上例可以用分隔識別字改寫如下：

update "my_table" set "a" = 5;

引號包圍的識別字可以包含除引號本身以外的任何其它字元。
要包含一個雙引號，我們可以寫兩個雙引號。
這樣我們就可以構造那些原本是不允許的資料表或者字串名字， 
比如那些包含空白或與號的名字。但長度限制依舊。

分隔識別字是區分大小寫。
如識別字 foo，foo 和 "foo" 是相同名稱， 
但 "Foo" 和 "FOO" 與上面三個以及它們之間都是不同的。 

常數
~~~~
常數字永遠指向同一個值，
sql 有三類常數：字串，位串，和數值。 

字串常數
~~~~~~~~
sql 裡的一個字串常數是用單引號「'」包圍的任意字串， 
如　'this is a string'。

字串常數裡單引號字元由兩個連續單引號表示，如'dianne''s horse'。 

反斜線「\」來跳脫單引號， 
因此上例字串可以改寫成'dianne\'s horse'。

其它跳脫字元如下：
\b 表退格字元，\f 表進紙，\n 表換行， \r 表回車，\t 表分欄。

\xxx，xxx 是一個八進制數，是對應 ascii 碼的字元。

任何其它跟在反斜線後面的字元有字面意義。
字串常數中兩個反斜線表反斜線字元。

編碼為零的字元不能出現在字串常數中。

兩個至少有一個換行空白分隔字串常數會被連接，並當成一個常數處理。 
比如：

select 'foo'
'bar';

等效於

select 'foobar';

而

select 'foo'      'bar';

是非法語法。

位串常數
~~~~~~~~
位串常數是引號前面有一個 b 的普通字串， 
比如 b'1001'。
位串常數可用字元只有 0 或 1。

位串常數可以用十六進位資料表示法，
但前綴 x ，比如，x'1ff'。 
此資料表示法等效於每個字元等於四位二進位位串常數。

兩種形式的位串常數都可以像普通字串常數那樣跨行連續。 

數值常數
~~~~~~~~
數值常數接受下列通用的形式：

code[digits.bnf]
digits
digits.[digits][e[+-]digits]
[digits].digits[e[+-]digits]
digitse[+-]digits
::

digits 是一或多個十進位數字。

若有小數點，
至少一位在小數點前面或後面。

若有指數分隔字 e，
至少一位於其後。 

數值常數裡不允許有空格或非數字字元鄉內。 

任何前置正負號都不是常數的一部分； 
而視為施加常數的運算子。

下例為數值常數：
code[numeric_literal.sql].
42
3.5
4.
.001
5e2
1.925e-3
::

若一數值常數既不含小數點，也不含指數運算子， 
若其值可放在 integer 類型中「32位」，
則視為integer 類型；

若其值可放在 bigint 中「64位」，則視為 bigint；

否則視為 numeric 類型。

含小數點和/或指數運算子常數總是被認為是 numeric 類型。

數值常數賦予初始資料類型只是類型解析算法的開端。
大多該常數會根據環境被自動強制轉換成最合適的類型。
必要時可透過強制類型轉換把數值解析成特定的資料類型。
比如，可以強制要求把一個數值視為類型real， 如下：

real '1.23'  字串風格
     
運算子
~~~~~~
下列字元是運算子：

+ - * / < > = ~ ! @ # % ^ & | ` ?

特殊字元
~~~~~~~~
有些特殊字元有特殊含義，因此不能用做運算子。

它們的用法的細節可以在相應的描述語法元素的地方找到。

圓括弧「()」用於分組和強制優先級。

方括弧「[]」用於選取數組元素。

逗號「,」在一些語法構造裡用於分隔陣列元素。

分號「;」結束一條 sql 命令。 
它不能出現在一條命令裡的任何地方，
除非引號包圍的來當做字串常數或者識別字用。

冒號「:」用於從數組中選取「片段」。

星號「*」表示一個資料表行或者一個符合類型值的全部字串。
在用作聚集函數 count 的參數時還有特殊含義。

句點「.」用在數字常數裡，並用於分隔模式，資料表和字串名字。

註釋
~~~~
註釋是任意以雙劃線開頭並延伸到行尾的任意字串，比如：

-- 這是標準的 sql92 註釋

註釋在進一步的語法分析之前會從輸入流刪除並用空白代替。

詞法優先級
~~~~~~~~~~
[operator_precedence]顯示 sql 運算子的優先級和關聯性。
大多數運算子都有相同優先級且都是左關聯。

table[operator_precedence].運算子優先級「遞減」
運算子   關聯性 說明 
======== ====== =======================================
.        左     資料表/字串名分隔符
[]       左     數組元素選則
-        右     單目負號
^        左     冪
* / %    左     乘，除，模
+ -      左     加，減
is              is true, is false, is unknown, is null
isnull          測試是否為空值
notnull         測試是否為非空值
in              集合成員
between         範圍包含
overlaps        時間間隔重疊
like            字串模式匹配
ilike           字串模式匹配
similar         字串模式匹配
< >             小於，大於
 =        右     等於，賦值
not      右     邏輯反
and      左     邏輯與
or       左     邏輯或
======== ====== =======================================
