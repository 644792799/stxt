交易
----
交易(Transaction)是一組資料庫操作的邏輯單元(logic unit)，
每個交易有三種狀態，分別是初始(Begin)、交易中以及交付(Commited)，
而且必須滿足下列 ACID 條件：

單元性(Atomic)：
  一個異動交易(Transaction) 中包含了數個以上資料庫動作(Actions)。
整個異動交易必須視為一個不可分割的單元。
  交易內的操作，不是全部執行，就是全部不執行。
  若單元內其中一個操作未完成，則整個交易必須回到初始狀態，
  回到初始狀態的程序稱為復原(Recovery, Rollback)。

也就是說整個異動交易的所有動作必須全部做完，若異動交易的中間過程有任何錯誤產生時，必須撤回(Rollback) 到未執行異動交易前的原點，也就是整個異動都不做

一致性(Consistency)：
  交易前後資料的必須維持一致。
  但交易的過程中未必保持一致性。
  像是銀行的轉帳，轉帳兩帳戶其金額加總在轉帳前後必須相等。

隔離性(Isolation)：
  對交易外的操作而言，只能看到交易的兩種終止狀態，初始及交付。
  所用到的資料或所產生的中間結果，
  都不能透露給其它異動交易讀取或更改
  這限制交易排程(Transaction Schedule)，
  必須維持可序列化(Serializable)。
  為了資料庫效能，隔離性通常會比較寬鬆。

持久性(Durability)：
  一旦交付，則交易狀態會永久保存且不能復原。
  如果異動交易執行過程都完全正常，且異動交易被委付確認(Commit) 後，
  無論事後系統發生錯誤，則當系統排除錯誤，恢復正常時，
  原異動交易被委付確認的資料仍必須存在。

並行
----
並行指的是系統能同時讓幾個交易同時執行。
並行能提高系統的總產量，所以交易能並行是必要的。

交易排程
--------
交易排程是一組交易所有操作的執行順序，在並行系統中，
交易內的操作可能彼此交插執行。

一般我們認為正確的交易排程是一個交易緊接著另一個異動交易循序地執行，
而且不相互交插執行，這稱為序列排程，用來衡量一個排程是否正確。
序列排程對於資料庫一致性的意義 
一個一致性的資料庫經過任何序列化排程運作後，該資料庫還是合乎一致性的。

非序列化排程
~~~~~~~~~~~~
指多個交易(Transaction) 同時交錯地執行，
然而個別異動交易內各動作(Action)，
仍遵守它在該異動交易內的先後順序。
 
可序列化排程 
~~~~~~~~~~~~
若一非序列化排程(Non-serial Schedule)，
其執行結果與任一個序列化(Serial Schedule)的執行結果相同，
則該非序列化排程稱為“可序列化排程”(Serializable Schedule)。

若一個交插交易排程 A 等於一個序列排程 X，A 稱為可序列的排程，
並認為 A 是正確的排程。

假設交易 A 的操作為 A.ops = {opa1, opa2, opa3}，
交易 B 的操作為 B.ops = {opb1, opb2, opb3}，
排程 S1 = {opa1, opa2, opa3, opb1, opb2, opb3} 及
S2 = {opb1, opb2, opb3, opa1, opa2, opa3} 都為序列排程，
都是先執行完一個交易的操作，才執行另一個交易的操作。

I1 = {opb1, opa1, opb2, opb3, opa2, opa3} 則為交插排程。
