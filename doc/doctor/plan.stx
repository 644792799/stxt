研究計劃
========
0990312

研究背景與動機   
--------------
自然文字排版系統
~~~~~~~~~~~~~~~~
文件排版系統，在目前分化成以下兩種取向：

第一種取向為主流且大眾化之所見即所得文件編輯器，
此種編輯器為視覺導向，操作容易，
且能看到與列印輸出相差無幾的文件，
但其缺點為文件結構與視覺排版無法分離，
使得同一種文件想產生多種輸出有很大的困難。

此外上述文件其儲存格式多為二進位編碼，
文件少許的修正改變，會使得整個儲存編碼可能完全不一樣，
因此此種文件無法用版本控管系統作分析。

第二種取向為 XML 文件，
其能表達純文件結構，並獨立於視覺排版之外，
且文件可用可讀性高的純文字碼編碼，而非二進位編碼，
有利於文件交換。

但階層太深的標籤控制碼，
讓人們已無法從編碼直接看出文件結構，
且標籤控制碼可能佔到文件碼近 1/3 的可能性。

語法分析與統計分析
~~~~~~~~~~~~~~~~~~
0990317

像是辨識一文字檔案的編碼，
目前都是使用統計分析，
但像 HTML 或 XML 等文件，
多用 ASCII 作控制碼，
若用統計分析會出現錯誤機率。

研究目的   
--------
本研究企圖建立一個自然文字排版系統，
其文件為純文字文件，
但利用直覺排版來表示文件結構，
非使用主流的標籤語言，來表示文件結構，
可取二者所長，避其所短。

系統能達成 XML 大部份的功能，
但其書寫結構是簡單且直覺的，
直覺的知識表示語言是最重要的目標。

本文認為自然語言是最好的知識表示語言，
這個剖析器應該介於程式語言與自然語言間，
除了滿足需求，源碼可讀性是最重要的，
而非如 XML 太過傾向機器可讀性及剖析效能。

文獻探討   
--------
多次剖析取向
~~~~~~~~~~~~
遞迴剖析
~~~~~~~~
研究方法   
--------
多次剖析取向
~~~~~~~~~~~~
0990310

一般剖析器都為__單次剖析__或__二次剖析__，

code[doc_struc].文件結構
  書
  | \
  章 章
 / | \
段 段 段
  /| \
詞 詞 詞
::

多次剖析比較接近人類去剖析自然語言的技巧，
如[[doc_struc]]所示，通常文件結構為階層式組織，
人類閱讀文件時則是依此階層組織依上而下的次序閱讀。

先剖析文件所表示的上層結構來理解及記憶此結構，
再選擇此結構的一個子元素，通常選擇規則為最先看到的元素，
再剖析此元素所表示的第二層結構。

假設閱讀一本「資料庫理論」的書，
先由書名「資料庫理論」暸解此書主要的關注資料庫的基本理論。

再看文件下一層結構「章節」，
設此章節名稱為「SQL」，
人們會暸解此章節主要的關注資料庫理論中關於 SQL 方面的理論。

以文件樹組織剖析結果
--------------------
0990311

因剖析歷程具階層關係，
故樹狀結構最適合用來組織此種剖析結構。

當剖析完文件第一層結構時，把剖析結果加入根，
並進而選出第一層結構某一元素作進一步剖析時，
可將剖析結果作為子元素加入剖析時的元素。

整個文件剖析完成後，便形成一個文件樹。

遞迴剖析
~~~~~~~~
0990311

例如多層次條列，便可用遞迴剖析，
達到不限定層次深度的條列文法。

code.多層次條列(Multiple Level List)
* 第一層條列一

  第一層段落  
  * 第二層條列一
    * 第三層條列一
::

如[多層次條列]所示之 StructedText 源碼，
其以前置雙空白表示階層關係，
如何達到不限定層次的剖析。

code.條列文法
list         | listitem
             : list listitem
listitem     | listhead
             : listitem subdoc
listhead     : LI
subdoc       : indent_block
indent_block : INDENT
             | indent_block INDENT
LI           : ^\*\s(.*)
INDENT       : ^\s\s(.+)$
::

預期成果
--------
參考書目 
--------
