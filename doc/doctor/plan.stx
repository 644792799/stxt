!是否可量化評鑑底層知識表徵模型的標準
由於我的碩士論文是語意網的一個應用，
為了證明語意網為何比傳統的關聯式資料庫更適合法規同步的模型，
便比較了語意網與關聯式模型的異同。
在進行上述的探討過程中，
一個問題逐漸浮上心頭。
法規同步系統要求同步的雙方系統必須能理解法規，
並作出判斷某個案例是否合法。
在用傳統的關聯式模型，
複雜的外鍵關係，令實作上有很大的困難，
當採取了語意網的技術，
實作變得相當簡單。

於是我的心裡想，這個簡單是如何來的？
閱讀中，找到了一個描述的名詞，稱為認知經濟性。
簡單的例子如檔案目錄結構，
若是使用樹狀結構來描述目錄結構，
其可能的知識表徵如下：

   B--C
  /  \D
A-----D
  \C--D
     \B

但若列舉完整路徑名來描述上述結構，
可能會變成

A
A\B
A\B\C
A\B\D
A\D
A\C\D
A\C\B 

用樹狀結構明顯得使用比較少的符號，
事實上在電腦上可以輕易證明，
樹狀結構比表格式的所佔的位元數較少。
但好玩的是，上述兩個描述其實表示同樣的資訊量，
可以說樹狀結構在表示整個目錄時，
比表格列舉更具認知經濟性。
為什麼？

首先回歸到計算的本質，
因為計算機器的目的都是為了幫人們解答問題，
人們將其心中的問題編碼成輸入資料，
再輸入至計算機器，
計算機器在內部執行計算動作，
並印出讓人們可以看到的解答，
人們便依照解答作出決策。

依照上述想法，計算在我的認知是從一個輸入表徵，
轉換出另一個輸出表徵的過程。
若輸入表徵與輸出表徵與真實世界的問題與解答。
有一定的對映關係，
則上述的表徵轉換的過程，
可以用來簡化人們解答問題的過程。

直覺上來講，
解答問題需要消耗能量、時間與空間，
首先我們要把問題編碼成心中的真實世界模型，
當然這些編碼狀態在人體中必須有些物理實體來表示，
比如說細胞、海馬迴等器官，這就是我所說的空間，
然後這些物理實體開始依據要解決問題的目標，
朝某個方向，執行狀態轉換，
一步步直到解答問題而停止，
這些轉換會消耗能量與時間。

而計算機器就是模仿上述的過程，
使人們可以將某些計算工作委任給它，
進而加速解答問題的速度。
故計算機器可以減低計算所要消耗人們的能量、時間與空間，
從而擴大人們計算的能力。

假設妳是一個公文管理員，
當同事要向妳調一份公文時，
妳會在電腦輸入公文的文號，
之後上面會顯示此公文放在那一個房間、
在那一個櫃子、在那一冊的第幾份公文，
然後她依照電腦上公文物理位置的指示，
大約在10分鐘內，會把你要的公文拿給你。

現在假設這是一個不會用電腦的管理員，
但要能提供上述的服務，
則他一定要記住所有公文文號與物理位置的對應，
但我們知道身為人類的公文管理員，
其記憶力不能像電腦一樣的強大，
故事實上，
他可能會從檔案室所存放的第一份公文，
比對到最後一份公文，
大約在一星期內，才能把你要的公文拿給你。

我們可以說，作為計算機器的電腦加強了公文管理員的計算能力。

這是本來身為人類特有的計算能力委任出去的結果。

因為計算需要消耗資源，
而現在人類越來越需要強大的計算能力，
人們製作計算機器的物理極限似乎也要達到了。

更為有效的利用計算能力，
是目前重要的目標之一。

其中一個關鍵便是前面提過的認知經濟性。

認知經濟性(cognitive economy)這個詞彙是出自認知科學(cognitive science)，
認知科學是探討人類認知過程的一門科學，
一個早期的認知科學理論的極佳例子便是佛學的五蘊，
色、受、想、行、識。

「色蘊」指人的物理形體，是認知的根本。
「受蘊」指人的感受，它是由五根眼、耳、鼻、舌、身，
接觸到五境色、聲、香、味、觸才產生的。
五根為因，五境為緣，產生感受的果。
若無五根、五境等接觸，就不會有「受蘊」。
「想蘊」則產生於感受之後，當五根接觸到五境，
有了各種感受，內心才取境相而引發思想。
「行蘊」則是思想之後，所引生的內心造作，
由取境思想而產生各種情緒變化，起為喜怒哀樂等感情。
「識蘊」的了解分別，則在於五根接觸五境之後所產生，
稱為五識眼識、耳識、鼻識、舌識、身識，加上意識，
了別於內心法塵，總稱六識。

這是一個相當寫實的認知過程理論。

以資訊主題來看，認知過程便是人類由物理感官，
接收環境資訊，
這些資訊在心中形成某種意識表徵的過程。

人工智慧的研究歷史上，
發現原來電腦最難達到的人類能力，
竟然是視力、聽力、觸覺等能力。
而難達到的原因是，
無法快速處理這連續不斷湧入的大量感官資訊。

人類為什麼可以快速處理這些資訊，
這是因為人類可以以一種經濟合內容豐富的形式以組織知識，
並捨棄無關緊要的資訊。

一個直覺的例子就是，
電視上曾有過「大家來找砸」的遊戲，
遊戲中，通常會公開 2 張大致相同圖片，或 1 段錄影
主持人請參賽者在限時內找出這 2 張圖片不同的地方，
或者找出錄影中不合常理的地方。
有時候我根本看不出有任何異常的地方，
但當公佈答案後，
我會不自覺的喊出「哇，原來如此！」
因為答案如下的文字描述，「女生手提包上面的 Z 紋路是相反的」
有了這個描述可以讓妳不用怎麼計算，而且很快的完成這個遊戲。

因為上述的抽象描述與答案的差異性最小，
並且把很多與答案不相關的雜訊給清除了。

所以人類從環境接收大量的資訊後，
會自動的過濾雜訊，
並記憶必要的資訊。

同時經由語言的分享，
可提醒人類如何分析他所接收的環境資訊，
如同上述，當人們聽到到答案的描述，
會使人們改變他的注意力，
並快速答到解題的目的。

語言比起非語言，
重點是其狀態變化較小，
就是我們常說的「一張圖勝過千言萬語」，
這個特質使得人們若用語言溝通，
可以比較有效率地把意義傳給另外一個人，
想像每次都要畫一張圖給另一個人來溝通，
是不是很麻煩？

同時由於語言狀態變化較小，
傳訊者在編碼訊息時，已過濾很多訊息，
是故收訊者接收語言時，
是收到傳訊者所過濾過的訊息，
訊息少，
所以傳訊者詮譯意義的空間很大，
為了讓雙方都能精確的溝通，
雙方都要去學習語言，
限定其詮譯意義的可能性，
使語言溝通能顧及效率及意義。

語言由於狀態變化較小，所費的儲存空間小，
所以人類分享訊息，主要以語言格式為主，
如電腦語言、文字、口語等等，
語言本身就是一種良好的知識組織模型。

但是這樣還不夠，
因為時空有限，尤其作為生物的我們，
更是有限。

所以語言中表示實體的名詞，
通常抽象成代表的一群相同特質的物體，
可以作相同的處置。
像是「車」就是指真實世界中可以讓我們開它來代步，
但要加油維持它的動力等等。

我們作這種抽象、分類的功能，
就是過濾其它不必要的雜訊，
我們不須要記得「車」必須由那些原子所組成，
其生產輪子是由那個工人作的，
這樣去記憶物體，其記憶空間會超出人類生理極限，
是故我們用語言，及分類來記住必要的資訊。

我以網路上某個網言的留言來說明上面的概念『

先以波赫士(J.L. Borges, 1944)小說中富內斯(Funes)這個角色作為例子。
這個故事的中文版本為「博聞強記的富內斯」，Funes 具有驚人的知覺記憶力；
不僅僅是過目不望而以，他能記得所有不同的時刻所看過的個別具體的東西。
「富內斯非但記得每一座山林中每一株樹的每一片葉子，
而且還記得每次看到或回想到它時的形狀。」以這樣的理解力與記憶力為基礎，
富內斯的某些認知行為便與一般人不同了。
一般人可能認同這樣的看法：「洛克指出，每一件具體事物，、每一塊石頭、
每一隻鳥、每一根樹枝都有其專名的語言是不可能的。」
而富內斯卻反而認為這樣的作法太過於概化了
「富內斯也層設計過一種相似的語言，但後來棄置不用了，
因為他認為過於一般化，過於含混。」

在富內斯強大的知覺記憶力的另一方面，
他其實不太需要，或說喪失了概念化的能力：「富內斯幾乎不會進行一般的、
純理論的思維。
他非但難以理解『狗』這個概括符號包括不同大小、不同形狀的許許多多、
各色各樣的個別的狗；麻煩的是，[他搞不清楚]從編號3-14的狗（從側面看的），
名稱為甚麼會和編號3-15的狗（從正面看的）是同一隻。」。

現在，我們發明了電腦、數位化的資料儲存技術。
我們可以像富內斯一樣地紀錄所有發生的事情、所有的個別物件、
甚至所有的想法。我們擁有無限大的資料庫，與無止境的編號系統。
但是，這遠遠不足以讓人有效的運用，就像富內斯一樣，
資料庫的集合仍然缺乏像「普通人」一樣的概念化能力。
傳統的圖書館學主題分類編目技術，透過專業者將資訊予以組織概念化；
資訊檢索的工程師用各種演算法找出個別事象與資料間的模式相關性；
Google的PageRank、Folksonomy、Semantic Web技術，
則精巧的將人類的概念化活動納入其演算法之中。

Eysenck & Keane 認為人的記憶系統是根據經濟原則，以組織經驗的，
因此一般人能夠從經驗中抽象出一些普遍性概念。
這種認知經濟性(cognitive economy)將世界分解為各種類別，
以減少人們需要學習、之學、
提取和識別個別的資訊量而實現的(轉引自 Collins & Quillian, 1969)。 

』

直覺理解，描述問題等同於描述目標，
若以上述推論，解決問題可視為使事物轉換成我們要的目標，
使事物轉換成我們要的目標一定要有一定的投入。

如同上述，利用計算機輔助我們解答問題，
我們會先寫下問題，
並依計算機模型，將問題編碼成程式碼，及資料，
並輸入到計算機中，然後計算機會輸出資料，
此資料就是答案在計算機中的表徵，
我們以眼認知此輸出，即知道要採取何種行動，
來解決我們的問題。

第二點，我們知道問題其實也可抽象成類別，
某一種的問題集合可以用相同的程式碼解決，
只是輸入資料不同。

如解決問題 x + 1 = ? 的機器，
讓我們只要輸入 x 的值，計算器便會輸出 x+1 的數字解答，
如輸入 x = 1，則解答即為 2，
輸入 x = 2，則解答即為 3。

我們可以把程式碼，或演算法視為問題集合的描述。

依上述模型，要量化認知經濟性，
首先一定了解認知經濟性和我們要解決的問題本質有關，
第二點，我認為認知經濟性與解決此問題的演算法及計算模型有關，
第三點，衡量認知經濟性最佳的辦法，便是資料輸入的長度。

當資料輸入的長度越短，
表示我們所要收集以及記憶的資訊越少，
像上述的公文系統，
我要解決的問題是拿到我要的公文，
而解決此問題我只要知道公文文號就好了，
因此這個系統的認知經濟性很高。

那麼我們不是把認知經濟性量化為輸入資料的長度就好了，
的確可以。

但是我前面提到的，就法規推理而言，
表徵使用關聯式模型較無認知經濟性，
而使用 OWL 較有認知經濟性，
因為我們要建立知識庫時，
關聯式模型比較不好表達法規類別，
而 OWL 比較好表達法規類別，
而且在作歸類推理時，
OWL 比較好寫推理程式，
因為 OWL 本身的計算模型支援很多隱函(imply)的計算，
能藉由少數的事實，推論出更多的事實，
而關聯式要模擬這些計算，
則必須用很複雜的 SQL 來描述。

實際上應該是說，法規推理問題，
就是分類問題的一個實例，
OWL 是用來解決分類問題的，
故用 OWL 很接近法規推理問題，
而程式師所需要寫的演算法便較為簡單，也不複雜。

現在我提出的問題是，
找尋適合的模型，是否可以量化成一個等式。
更為簡化的是，機器如何如人類般作出抽象表徵，
並建立一個抽象模型來解決某個問題。

如何讓機器也有認知經濟性，提高機器的推理及計算能力，
量化認知經濟性是第一個重要問題，
因為機器精於處理量化的數值。
故認知經濟性量化也可以使機器自動去選擇如何提高其認知經濟性的策略，
像是資料結構、演算法等等。

首先我猜測另外的資訊量隱藏在計算模型中。
以上述的檔案目錄問題為例，
檔案目錄是用來組織其資料儲存位置的一種抽象形式，
若是用完整路徑表來實作，
每個完整路徑會有一個描述此檔案在硬碟的實體位置指標，
及另一個描述檔案所佔的空間整數，
如此方可正確取得檔案內容。

現在若我的檔案目錄是使用樹狀結構儲存，
則位置指標及檔案大小，應該存放在每個節點上。

實務上，我們描述一個檔案時，往往會使用完整路徑，
實作若是完整路徑表，只要列舉表中每個項目
並由一個迴圈比對要求的路徑是否符合現在列舉的項目，
便能解決此問題。
(不考慮二元樹或雜湊表，因為上述演算法，會佔用額外的資料空間)

若用樹狀結構，則需要把樹狀結構轉成表，
再重覆上面的查表法，
或者將使用者指定的路徑，
剖析成節點陣列，
依序從根節點比對。

無論如何，檔案操作上，
樹狀結構的計算，在描述上，似乎比較長。

而另一個值得注意的是，
計算所含的資訊量，
和時間有關，
因為計算是一步步的執行，
所以等同於把資料在時間上展開。

為了能量化認知經濟性
所以我會猜想下列等式是否存在？

實際資訊量 = 演算法描述長度 X 時間 X 輸入資料長度 X 常數

若能量化實際資訊量，
我可將認知經濟性量化定義如下：

認知經濟性 = 輸入資料長度 / 實際資訊量

而實際資訊量越大，越能作出正確的決策
(這是我的直覺，
以下棋為例，若我看到更多的棋局發展，
則贏棋的機率越高)

所以認知經濟性可以解釋為
輸入資料長度很短，
但可以表達很高的資訊量。

輸入資料長度很短，
表示作為使用者的我只要認知到很少的資訊，
但表達很高的資訊量，
表示我解答的問題較多且較正確，
這就是高認知經濟性，
反之就為低認知經濟性。

!!描述演算法
要量化認知經濟性，
首先要理解如何去描述演算法，
描述演算法的目的是能把演算法用文字陳述，
如此才能定義長度。

目前描述演算法主要選取一個計算模型，
並利用此計算模型的原始操作(primative operation)
來描述演算法，
最普遍的是圖靈機模型(Turing Machine)、
還有類似的 Post 模型、
Lamda 計算和 Lisp 語言。

同時這些模型都具有一個類似萬用圖靈機(Universal Turing Machine)的概念，
換句話說，他們用這些都能建立一個演算法，
能接受描述另一組演算法的輸入，
並輸出此輸入演算法的輸出。

演算法資訊理論(algorithmic information theory)是另一個模型，
由 G. J. Chaitin 於 70 年代提出，
它提供一個最小程式長度(minimum program size)的概念，
可用來定義演算法的長度，
但程式長度的概念是值基於計算模型與它的輸出表徵，
有價值的演算法就是最小程式長度遠小於他的輸出表徵，
但主要的問題是輸入與計算模型在裡面並沒有獨立量測標準。

!!演算法的執行時間
演算法的執行時間和演算法以及輸入資料有關，
目前遇到的重要問題是，
如何把時間抽取出來。

!!知識表徵(KR)
上述的每一個概念，都與知識表徵習習相關，
輸入資料的知識表徵，演算法的知識表徵，
甚至資訊量的知識表徵。

以前我就對邏輯感到很有興趣，
因為邏輯可以讓我們看到文字表相後面無限的真相。
透過假定的推理規則，由少數的事實，推出更多的事實。
因此我逐漸對計算理論感到興趣。

!研究以 Ruby 實作 OWL 推理器
由於語意網的興起，
OWL 剖析器及推理器，
目前最有名的是 Jena 這個 OWL 推理器函式庫，
但是 Java 靜態型態變數(static type)的語法，
使得這個函式庫用起來不自然。

寫程式重要的是表達力，
事實上證明，忽略效率不談，
動態型態的對於抽象事物的表達能力遠大於靜態型態變數(static type)，
同時讓程式語言本身有更強大的元程式(metaprogramming)編程的能力，
而不用一件事情必須學習不同的語言，使用不同的編譯器。

所以我想研究若以 Ruby 實作 OWL 推理器，
應該會更好使用，
但如何提升剖析效率是另一個重要的議題。

!研究以 Ruby 實作 compiler compiler 的DSL
