單元測試(unit test)
-------------------
Nose GAE
~~~~~~~~
Nose 可以自動收尋目錄下面所有的 python 檔案並執行 unittest，如果要在
本機端上面測試 google app engine 的程式，需要另外安裝 Nosegae_，
Nosegae 會在本機建立好 google app engine 的環境，避免 import 錯誤。

這兩個都可以透過 easy_install 安裝:

easy_install nose

easy_install nosegae

Nosegae 預設的 google app engine 路徑是 /usr/local/google_appengine，
如果不是這個路徑可能需要在執行的時候傳入option (--gae-lib-root)

nosetests -v --with-gae --gae-lib-root="C:\Document and Setting\googleappengind"

接下來只要寫好測試模組即可，
測試模組的檔案記得用test_{name}.py這種格式。

Warning
~~~~~~~
在 Mac Snow Leopard 上一直會丟煩人的 LOG 不過應該是 GAE 的問題 

root: INFO: zipimporter('/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/setuptools-0.6c11-py2.5.egg', '') root: INFO: zipimporter('/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages/NoseGAE-0.1.4-py2.5.egg', '') root: DEBUG: Could not import "strop": Disallowed C-extension or built-in module

gaeunit.py
~~~~~~~~~~
gaeunit.py 是專門為 google app engine 設計的測試架框，
可以在網頁上面顯示測試結果。

使用上也十分簡單，下載 gaeunit.py 然後放到專案目錄下面，
並在 app.yaml 加上:

- url: /test.*
  script: gaeunit.py

即可開始撰寫測試模組，
可以在網址輸入 http://localhost:8080/test 閱讀測試報告。

也可以不要執行全部的測試，只要把想測試的模組名稱用url傳入即可:

Examples:

http://localhost:8080/test?name=test_module
http://localhost:8080/test?name=test_module.ClassTest
http://localhost:8080/test?name=test_module.ClassTest.testMethod

Unit Test Your Google App Engine Models
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I've been working on a project using Google App Engine (GAE) called "les Freres Jacques" That manipulates images of people's face onto the cover of this old french LP. Look for it to be out in a couple months. Anyway, My favorite way to start any project is by doing TDD. Unfortunately I'm new to python and GAE simultaneously so I had to do plenty of research to figure out how to unit test a GAE app. Most importantly for me was the ability to test my models that are based on google's datastore api. What follows is some information to get you started writing unit tests against a GAE model. First, a list of the tools you need to install.
Nose is a tool for running your python unit tests.

NoseGAE is a plugin for nose that bootstraps the GAE environment.

The easiest way to install these is with python's easy_install, which as far as I can tell is similar to ruby's 'gem' program and perl's 'cpan' program... though I don't know if it resolves dependencies automatically. Anyway, on OSX easy_install is installed by default so you can simply type
sudo easy_install nose
sudo easy_install nosegae

Now let's create a test to exercize a simple GAE model object. Here is
 a file called test_simple_model.py

import unittest
from google.appengine.api.users import User
from test_example.simple_model import SimpleModel

class TestSimpleModel(unittest.TestCase):
def test_creation(self):
 user = User(email = "test@foo.com")
 model = SimpleModel(goo_user = user)
 model.put()
 fetched_model = SimpleModel.all().filter('goo_user =', user).fetch(1)[0]
 self.assertEquals(fetched_model.goo_user, user)
The nose tool we installed earlier gives us a program called nosetests to run. When you call it it looks through your project and runs all your tests. We should call it now with the google app engine switch.
nosetests --with-gae
Wheee!! It is a lovely failing test.

======================================================================
ERROR: Failure: ImportError (No module named simple_model)
----------------------------------------------------------------------
Traceback (most recent call last):
...
from test_example.simple_model import SimpleModel
ImportError: No module named simple_model

----------------------------------------------------------------------
Ran 1 test in 0.002s

FAILED (errors=1)
Good. Now we need to write some code to get our test passing. Here is what I wrote in a file called simple_model.py.
from google.appengine.ext import db
class SimpleModel(db.Model):
goo_user = db.UserProperty()
Now when I run
nosetests --with-gae
I get the lovely
.
----------------------------------------------------------------------
Ran 1 test in 0.008s

OK
and I am happy because I see how I can do TDD with GAE! Here is a list of references I used to figure this stuff out. Hope you find them useful. You can find the full source of this example here.
Python Easy Install
Python Unit Test documentation
Python Mock Object Framework
Python Nose
Python NoseGAE
Update: 11/30/08
The datastore persists between tests which isn't usually what I want to happen. I submitted an issue on the nose-gae issue tracker. In the meantime here is a workaround to make sure the datastore is flushed between runs. Add this method to your test class and call it in your setUp method.

from google.appengine.api import apiproxy_stub_map
from google.appengine.api import datastore_file_stub

def clear_datastore(self):
 # Use a fresh stub datastore.
 apiproxy_stub_map.apiproxy = apiproxy_stub_map.APIProxyStubMap()
 stub = datastore_file_stub.DatastoreFileStub('appid', '/dev/null', '/dev/null')
 apiproxy_stub_map.apiproxy.RegisterStub('datastore_v3', stub)
Update: 1/29/09
Reading Dom's well researched and documented post on testing App Engine applications. I thought I better spruce up my own post by adding a citation. The code from the clear_datastore method above comes from this message posted on the google app engine google groups mailing list.
Update: 5/17/09
There is currently an issue with nosegae. See defect 18. There are patches that fix the issue posted there. I downloaded the source code, removed the subversion directories, patched the code and ran
easy_install .
in the root directory of the code. That fixed the issue for me.
Update: 5/17/09
As of GAE SDK 1.2.1 the appid of your datastore stub must match your appID. Make sure your call to DatastoreFileStub uses your actual app id.
POSTED BY SHLOMO AT 7:07 AM 
LABELS: GOOGLE APPENGINE, PYTHON, TESTING
6 COMMENTS:

 testblog said...
Dude!. Thanks for this post. I've been scratching my head for the last two hours trying to figure out why entities are persisting between tests.

Thanks!

JANUARY 17, 2009 12:03 PM
 Dom Derrien said...
Hi Josh,

Thanks for your post. It gave me materials to write an extended post. I even mentioned you're a TDD adopter ;)


A+, Dom
--
http://domderrien.blogspot.com/2009/01/automatic-testing-of-gae-applications.html

JANUARY 28, 2009 10:15 AM
 DF said...
Why does nosetests not find my test?

$ nosetests
----------------------------------------------------------------------
Ran 0 tests in 0.000s

OK

$ cat unittests.py
import unittest
from google.appengine.api.users import User
from models import Poll, Option

class TestPoll(unittest.TestCase):
def test_creation(self):
poll = Poll()
poll.put()
self.assertTrue(poll.id() != 0)
option = Option()
option.poll = poll
option.text = "some option text"
option.put()
self.assertEquals(1, len(poll.get_options()))
self.assertEquals(0, len(poll.get_responses()))

AUGUST 21, 2009 4:54 PM
 marram said...
Your test script file name should have a test_ prefix.

AUGUST 21, 2009 5:00 PM
 DF said...
Bless you!

If only http://somethingaboutorange.com/mrl/projects/nose/0.11.1/finding_tests.html

had anything nearly as informative.

AUGUST 21, 2009 6:39 PM
 J said...
You may also be interested in GAE Testbed
(http://gae-testbed.googlecode.com) which provides a few base test
cases that simplify testing things like sending emails or adding
things to the Task Queue.
