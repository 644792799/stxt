資料存放區
----------
資料存放區為您的網路應用程式，提供可擴充的完整資料儲存服務。資料存放區
以網路應用程式為設計概要，著重於讀取和查詢的效能表現，可儲存具備屬性的
資料實體，並依照應用程式定義種類組織整理。資料存放區可以對相同種類的實
體執行查詢，還可以進一步篩選或排序其屬性值和屬性金鑰。為了在龐大資料集
中快速取得結果，所有查詢均會預先設定索引。資料存放區使用應用程式所定義
的實體分組做為分散式資料網路的交易單位，進而支援交易式更新。

實體(entity)
~~~~~~~~~~~~
「實體」為資料存放區資料物件之操作單元，
用來表示真實世界的一項事實。

程式師可透過資料存放區對「實體」進行儲存及查詢。

實體具有一或多個「屬性」，
每個屬性具有值用來描述實體的某個屬性。

值之類型包括整數、浮點值、字串、日期、二進位資料和其他資料，
且可以是其他實體的參照。

每個實體具有可唯一識別該實體的金鑰。

最簡單之金鑰為類型加實體流水號形成一個識別碼。
也可為程式師手動設定之字串。

應用程式可以透過金鑰，或透過比對實體屬性的查詢，從資料存放區擷取實體。

查詢可能傳回零或多個實體，可以傳回以屬性值排序的結果。
查詢也可以限制資料存放區傳回的結果數量，以節省記憶體和執行時間。

模型(Model)
~~~~~~~~~~~
資料存放區之一致性十分明顯，卻不是關聯式資料庫。
雖然資料存放區介面的許多功能與傳統資料庫相同，
但是資料存放區也擁有獨一無二的特性，
可透過完全不同的資料設計和管理方式，展現自動調整的優勢。

資料存放區與關聯式模型最大差異為沒有結構，
同類型之實體不需要具備相同屬性，而相同屬性其值也不必為相同類型。

而關聯式資料庫要求同表格之記錄必須具有相同表頭，
換句話說，實體結構由應用程式於執行期動態驗證。

在 Python API 中，模型用來描述實體類型，
包括屬性類型及相關設定。

模型利用 Python 之類別來定義，
並使用類別屬性來描述實體之屬性結構。

任一類型之實體是由相對應之模型類別實例所代表，
並以實例屬性代表屬性值。

建立實體可呼叫模型類別之建構式，
而 put() 可將實體儲存至資料存放區。

code.Emoployee

import datetime
from google.appengine.ext import db
from google.appengine.api import users

class Employee(db.Model):
  name = db.StringProperty(required=True)
  role = db.StringProperty(required=True, 
         choices=set(["executive", "manager", "producer"]))
  hire_date = db.DateProperty()
  new_hire_training_completed = db.BooleanProperty()
  account = db.UserProperty()

e = Employee(name="",
             role="manager",
             account=users.get_current_user())
e.hire_date = datetime.datetime.now()
e.put()

::

以金鑰存取實體
~~~~

k = i.key()
i2 = Model.get(k)
i == i2

查詢實體
~~~~~~~~


查詢會以模型類別實例的型式傳回實體，可以修改和放回資料存放區。
資料存放區提供兩種查詢介面：
1.查詢物件
2.GQL - 類似 SQL 的查詢語言。

::
training_registration_list = [users.User("Alfred.Smith@example.com"),
                              users.User("jharrison@example.com"),
                              users.User("budnelson@example.com")]

employees_trained = db.GqlQuery("SELECT * FROM Employee WHERE 
                                 account IN :1",
                                training_registration_list)
for e in employees_trained:
    e.new_hire_training_completed = True
    db.put(e)

查詢程序會先篩選出指定類別之每個實體，
進而對上述結果集每個實體之屬性值和金鑰
看是否符合篩選條件及排序，並傳回此實體做為查詢結果。
::
  資料存放區 -篩選同類-> 同類實體 -篩選條件-> 結果集

Query 類別
~~~~~~~~~~
Query 類別是一種資料存放區查詢介面，它使用物件和方法來準備查詢。
Query 是由 google.appengine.ext.db 模組所提供。

應用程式可以使用下列方法建立 Query 物件：
以要查詢實體的 Model 類別來呼叫建構函式，
或者呼叫類別的 all() 類別方法。

class Song(db.Model):
  title = db.StringProperty()
  composer = db.StringProperty()
  date = db.DateTimeProperty()

query = db.Query(Song)

query = Song.all()
若沒有修改，物件會代表指定種類之所有實體的查詢。
方法以屬性條件 (filter())、上階條件 (ancestor()) 以及排序 (order()) 等
，呼叫自訂的查詢。為了便利起見，這些方法會傳回 self，
以便在單一陳述式中將它們鏈結在一起。

query.filter('title =', 'Imagine')
query.order('-date')
query.ancestor(key)

query.filter('title =', 'Imagine').order('-date').ancestor(key)
應用程式會以二種方式之一執行查詢：
呼叫 fetch() 方法。這會針對資料存放區執行單一呼叫以擷取結果 (可高達指定的結果數量)。Query 物件不會快取結果，因此第二次呼叫 fetch() 時，會重新執行查詢。
results = query.fetch(limit=5)
for song in results:
  print song.title
將 Query 物件視為可重複執行項目。iterator 在小型批次中從資料存放區抓取結果，可允許應用程式結果的反覆運算，以避免擷取超過所需的結果數量。當符合查詢的所有結果都已經抓取完之後，會停止反覆運算。使用 fetch() 時，iterator 介面不會快取結果，因此從 Query 物件建立新的 iterator 時，將會重新執行查詢。
for song in query:
  print song.title
另請參閱 GqlQuery，使用類似 SQL 查詢語言的查詢類別。
注意：索引式的資料結構和資料存放區查詢的演算法不支援部分查詢種類。請參閱查詢和索引：查詢的限制以取得詳細資訊。
建構函式
Query 類別的建構函式定義如下：
class Query(model_class)
一種資料存放區查詢介面，使用物件和方法來準備查詢。
Query 實例會傳回建構函式所代表種類之所有實體的查詢。實例方法 filter()、order() 以及 ancestor() 會將條件套用到查詢，以便篩選結果或將結果排序。
引數：
model_class
Model (或 Expando) 的類別，代表查詢的資料存放區實體種類。
實例方法
Query 類別實例具有下列方法：
filter(property_operator, value)
將屬性條件篩選器新增至查詢。查詢只會傳回屬性符合所有條件的實體。
引數：
property_operator
包含屬性名稱與可省略比較運算子的字串。名稱和運算子必須以一個空格分隔，如下所示：age >。支援下列比較運算子：< <= = >= > != IN 。如果字串省略了運算子 (引數只剩下屬性名稱)，則篩選器會使用 = 運算子。
value
在比較中位於運算式右手邊的值。它的類型應該與要進行比較屬性的值資料類型相同。請參閱類型和 Property 類別。
query.filter('height >', 42).filter('city = ', 'Seattle')

query.filter('user = ', users.get_current_user())
order(property)
為結果增加排序。結果會排序，以新增的第一個順序開始。
引數：
property
字串，要排序的屬性名稱。若要指定順序為遞減，請在名稱前面加上連字號 (-)。若沒有連字號，則順序為遞增。
# Order by last name, alphabetical:
query.order('last_name')

# Order tallest to shortest:
query.order('-height')
ancestor(ancestor)
將上階條件篩選器新增至查詢。查詢只會傳回指定實體為其上階 (路徑中的任何位置) 的實體。
引數：
ancestor
Model 實例或 Key 實例代表上階。
get()
執行查詢，然後傳回第一個結果，或者 None (若查詢沒有傳回任何結果)。
get() 隱含的「限制」為 1。 最多只會從資料存放區擷取 1 筆結果。
fetch(limit, offset=0)
執行查詢，然後傳回結果。
limit 和 offset 引數控制從資料存放區擷取的結果數量，以及 fetch() 方法傳回的結果數量。
資料存放區會擷取 offset + limit 筆結果至應用程式。資料存放區本身不會略過第一筆 offset 結果。
fetch() 方法會略過第一筆 offset 結果，然後傳回其他的結果 (limit 結果)。
查詢的效能特色與「位移」的量加上「限制」成線性關係。
注意：fetch() 最多傳回 1000 筆結果。符合查詢的項目若超過 1000 筆，而且沒有指定限制或者使用的限制超過 1000，則只會傳回 fetch() 所傳回的前 1000 筆結果。
引數：
limit
要傳回的結果數量。符合條件的結果如果不足，則會傳回比 limit 更少的結果數量。
limit 是必要引數。結果數量未知的時候，要從查詢取得每次的結果時，請使用 Query 物件做為可重複執行的項目，而不要使用 fetch() 方法。
offset
要略過的結果數量。
傳回值是模型實例清單，有可能是空白清單。
count(limit)
傳回此次查詢所擷取的結果數量。
透過常數係數抓取所有資料時，使用 count() 較快速，不過結果集的大小愈大，則執行時間仍然會較長。若預期的計數很少的時候，建議使用 count()，或指定 limit。
注意：count() 最多傳回 1000 筆結果。符合查詢條件的實際數量若超過最大值，count() 只會傳回 1000 筆。
引數：
limit
要計數的最大結果數量。

索引
~~~~
應用程式執行查詢時，資料存放區會直接從相應的索引擷取結果，
索引是一個表格，當中列有依需求排序的查詢結果。
應用程式是透過設定檔定義其索引。

實體變更會連帶使資料存放區更新索引。

如果開發網頁伺服器遇到尚未設定索引的查詢，
就會自動將議新增至這個檔案。
您可以在上傳應用程式之前編輯該檔案，以手動調整索引。

此機制支援的查詢種類十分廣泛，因此也適合大部分應用程式。
不過，此機制並不支援您在其他資料庫技術所慣用的部分查詢種類。

屬性可擁有一或多個值。具有多個值的屬性可擁有混合類型的值。
查詢具有多個值的屬性，可測試是否有值符合查詢條件。
因此，此類屬性在驗證會員資格時十分實用。

與傳統資料庫不同，資料存放區使用分散式架構來支援非常龐大的資料集。
應用服務引擎的應用程式可以透過描述資料物件之間的關聯，
以及透過定義查詢的索引，來最佳化資料分散的方式。

交易
~~~~
資料存放區可以在單一交易中執行多個操作，並於任何一項操作失敗時，
復原整個交易。這對分散式網路應用程式特別有用，因為在此類應用程式中，
可能會出現多位使用者同時存取或操縱相同資料物件的情形。

資料存放區對每個嘗試建立、更新或刪除實體的動作都是在「交易」中進行。
交易可確保實體的所有變更都儲存在資料存放區，
或在操作失敗時復原這些變更，以保證實體中資料的一致性。

您可以使用 Transaction API (交易 API)，在單一交易中對實體執行多項動作
。舉例來說，如果您要增加某個物件中的計數器欄位值，您必須讀取計數器的值
、計算新的值，再予以儲存。如果沒有交易，其他程序可能會在您讀取和更新的
空檔中，增加計數器數值，導致應用程式覆寫已更新的值。在單一交易中執行讀
取、計算和寫入可以防止其他程序干擾增加計數的過程。

您可以在單一交易中，對多個實體進行變更。為了支援這項功能，「應用服務引
擎」必須事先瞭解哪些實體會同時更新，才能以支援交易的方式儲存這些實體。
建立實體時，您必須宣告此實體與其他實體屬於相同的「實體群組」。所有在交
易中擷取、建立、更新或刪除的實體，均需屬於相同的實體群組。

實體群組
~~~~~~~~
實體群組是由實體關聯性之階層所定義。

如要在群組中建立實體，
您必須宣告實體是群組中另一個實體的「子系」，
而另一個實體則是「父系」。

沒有父系之實體是「根實體」，
而沒有子系的根實體則是單獨存在於某個實體群組中。

每個實體與根實體之間，
都擁有父子式關聯性路徑。

此路徑是實體完整金鑰的重要元素。
在路徑中，每個實體的種類與識別碼或金鑰名稱均可代表完整金鑰。

資料存放區使用「開放式同步存取」管理交易。
當應用程式的執行個體對實體群組中的實體套用變更時，
其他嘗試更新群組實體的動作會立即失敗。
應用程式可以再次嘗試交易，以套用更新資料。

參照屬性(ReferenceProperty)
~~~~~~~~~~~~~~~~~~~~~~~~~~~
參照屬性其值為其他實體之金鑰，
且強制所有值必須參考指定模型之實體。

將模型實例指派給 ReferenceProperty 屬性時，會自動使用其金鑰做為值。

每間民宿可能會有一至多個房間，上述關係則可用下述模型表示::

  class Homestay(db.Model):
      name = db.StringProperty(required=True)

  class Room(db.Model):
      name = db.StringProperty(required=True)
      homestay = db.ReferenceProperty(Homestay, collection_name='rooms')

  homestay = Homestay()
  homestay.name = 'fhopecc'
  homestay.put()

  room = Room()

  # A reference value is the key of another entity.
  room.homestay = homestay.key()

  # Assigning a model instance to a property uses 
  # the entity's key as the value.
  room.homestay = homestay
  obj2.put()

ReferenceProperty 屬性值可以當做被參考實體的模型實例來使用。
若參考的實體不在記憶體中，使用其屬性做為實例時，
會自動從資料存放區擷取該實體。

obj2.reference.prop = 999
obj2.reference.put()

results = db.GqlQuery("SELECT * FROM SecondModel")
another_obj = results.fetch(1)[0]
v = another_obj.reference.prop

刪除實體時，其金鑰若為參考屬性的值，則不會變更參考屬性。
參考屬性值可以是無效金鑰。
若應用程式預期參考可能無效，
則應用程式可以使用 if 陳述式來測試物件是否存在::

  obj1 = obj2.reference

  if not obj1:
    # Referenced entity was deleted.

為了便利起見，
程式庫也提供 SelfReferenceProperty，等同於參考相同種類、
具有屬性實體的 ReferenceProperty。

一對多關係
~~~~~~~~~~
通常會用到這個關聯，就是 A model 中有個 column 的值可能是一個串列，
在 RDB 中我們可能就會再建立一個 B model，
然後在 B 中設下一個 A_id 的 column 用來指向 A 的某個 row，
但是在 Datastore 中沒有 join 運算，所以得換個方法來做。

通訊錄中每個人可能會有一至多個 E-Mail，
上述關係則可用下述模型表示::

  class User(db.Model):
      name = db.StringProperty(required=True)

  class Email(db.Model):
      user = db.ReferenceProperty(User)
      addr = db.EmailProperty(required=True)
      mail_type = db.StringProperty()

Email 模型中其 user 屬性其型別為 Reference ，
用來表示 user 參考到 User 模型，
並且為 User 下建立一個 emails 集合，
用來表示此 User 所有的 Email，
則可以建立以下之實體::
 
  ericsk = User(name='Lin-Chieh Shangkuan')
  ericsk.put()

  mail1 = Email(user=ericsk,
                addr='foo@bar.to',
                type='example')
  mail1.put()

  mail2 = Email(user=ericsk,
                addr='bar@foo.to',
                type='blog')
  mail2.put()

要列出某使用者之所有 email 如下式::
 
  for email in ericsk.email_set:
      print 'type: %s, addr: %s' % (email.mail_type, email.addr)

上述 email_set 之屬性稱為反向參考，
此屬性值為參照到使用者 ericsk 之所有實體的查詢。

反向參考的預設名稱為模型類別名稱小寫並於結尾加上 "_set"，

因為我們在建立 Email 模型時，
有指定說要在 Reference 的 User 中建立一個 emails 欄位，
直接對這個集合作 iteration 拿出所有的內容。
這樣一個簡單的一對多關係就算大功告成了。


若模型有多個參照屬性值參照相同之模型，
則反向參照屬性的預設建構式會引發錯誤::
  class FirstModel(db.Model):
      prop = db.IntegerProperty()

  # This class raises a DuplicatePropertyError with the message
  # "Class Firstmodel already has property secondmodel_set"
  class SecondModel(db.Model):
      reference_one = db.ReferenceProperty(FirstModel)
      reference_two = db.ReferenceProperty(FirstModel)

程式師可設定參考屬性建構式之 collection_name 來指定反向參考名稱，
來避免上述錯誤::

  class FirstModel(db.Model):
      prop = db.IntegerProperty()

  # This class runs fine
  class SecondModel(db.Model):
      reference_one = db.ReferenceProperty(FirstModel,
        collection_name="secondmodel_reference_one_set")
      reference_two = db.ReferenceProperty(FirstModel,
        collection_name="secondmodel_reference_two_set") 

使用 ReferenceProperty 模型屬性類別時，
才能使用模型實例的自動參考和解除參考、類型檢查以及反向參考。
儲存為 Expando 動態屬性或 ListProperty 值的金鑰不具有這些功能。

而同時你拿到了一個 email entity 也可以使用 user 這個欄位關聯到對應的
user entity，這樣也很快就完成一對一關聯。

多對多關聯(Many-to-Many)
~~~~~~~~~~~~~~~~~~~~~~~~
Many-to-Many 常被出現在指定分類的應用中，舉例來說，我的部落格可能有很多分類（Category），每個分類下會有很多篇文章，而對一篇文章來說，它也可能屬於不同的分類下，這樣就產生了一個 Many-to-Many 的關聯。

廢話不多說，寫成 Datastore 的 Model 就可以寫成這樣：

 
class Post(db.Model):
    title = db.StringProperty(required=True)
    body = db.TextProperty(required=True)
    post_at = db.DateTimeProperty(auto_now_add=True)
    categories = db.ListProperty(db.Key)

class Category(db.Model):
    name = db.StringProperty(required=True)
    description = db.TextProperty()
   
    @property
    def posts(self):
        return Post.gql('WHERE categories = :1', self.key())
在 Post model 中我建立了一個 categories 欄位，它是一個 List 型別，裡面的資料都是 db.Key 這個型別，每一個放進 Datastore 的 entity 都有一個唯一的 key，所以打算用這個 list 來表示某篇文章究竟有多少分類。而 Category model 中，我們自己寫了一個 posts 的 property，裡面只是要根據 key 來取出對應的 Posts。

這樣在建立 entity 的時候就可以寫成這樣：

 
cat_comp = Category(name='Computer Science')
cat_comp.put()
cat_prog = Category(name='Programming')
cat_prog.put()

post1 = Post(title='Blah', body='First Post')
post1.categories.append(cat_comp.key())
post1.categories.append(cat_prog.key())
post1.put()

這樣我的這篇文章便同時有 Computer Science 分類，也在 Programming 分類下。

所以我要從 Post 取得它所有分類時，就寫成這樣：

 
categories = db.get(post1.categories)
for cat in categories:
    print 'Category: %s' % cat.name
而要看某個分類下有什麼文章則是寫成：

 
for post in cat_comp.posts.order('-post_at'):
    print 'Title: %s' % post.title

這樣是不是也很簡單就達到 Many-to-Many 的效果了呢，只要好好想一下
 Datastore 中 Reference 及 List 資料型態的用法就可以做不少關聯了喔。
