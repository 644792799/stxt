資料存放區
----------
資料存放區為您的網路應用程式，提供可擴充的完整資料儲存服務。資料存放區
以網路應用程式為設計概要，著重於讀取和查詢的效能表現，可儲存具備屬性的
資料實體，並依照應用程式定義種類組織整理。資料存放區可以對相同種類的實
體執行查詢，還可以進一步篩選或排序其屬性值和屬性金鑰。為了在龐大資料集
中快速取得結果，所有查詢均會預先設定索引。資料存放區使用應用程式所定義
的實體分組做為分散式資料網路的交易單位，進而支援交易式更新。

實體(entity)
~~~~~~~~~~~~
「實體」為資料存放區資料物件之操作單元，
用來表示真實世界的一項事實。

程式師可透過資料存放區對「實體」進行儲存及查詢。

實體具有一或多個「屬性」，
每個屬性具有值用來描述實體的某個屬性。

值之類型包括整數、浮點值、字串、日期、二進位資料和其他資料，
且可以是其他實體的參照。

每個實體具有可唯一識別該實體的金鑰。

最簡單之金鑰為類型加實體流水號形成一個識別碼。
也可為程式師手動設定之字串。

應用程式可以透過金鑰，或透過比對實體屬性的查詢，從資料存放區擷取實體。

查詢可能傳回零或多個實體，可以傳回以屬性值排序的結果。
查詢也可以限制資料存放區傳回的結果數量，以節省記憶體和執行時間。

模型(Model)
~~~~~~~~~~~
資料存放區之一致性十分明顯，卻不是關聯式資料庫。
雖然資料存放區介面的許多功能與傳統資料庫相同，
但是資料存放區也擁有獨一無二的特性，
可透過完全不同的資料設計和管理方式，展現自動調整的優勢。

資料存放區與關聯式模型最大差異為沒有結構，
同類型之實體不需要具備相同屬性，而相同屬性其值也不必為相同類型。

而關聯式資料庫要求同表格之記錄必須具有相同表頭，
換句話說，實體結構由應用程式於執行期動態驗證。

在 Python API 中，模型用來描述實體類型，
包括屬性類型及相關設定。

模型利用 Python 之類別來定義，
並使用類別屬性來描述實體之屬性結構。

任一類型之實體是由相對應之模型類別實例所代表，
並以實例屬性代表屬性值。

建立實體可呼叫模型類別之建構式，
而 put() 可將實體儲存至資料存放區。

code.Emoployee

import datetime
from google.appengine.ext import db
from google.appengine.api import users

class Employee(db.Model):
  name = db.StringProperty(required=True)
  role = db.StringProperty(required=True, 
         choices=set(["executive", "manager", "producer"]))
  hire_date = db.DateProperty()
  new_hire_training_completed = db.BooleanProperty()
  account = db.UserProperty()

e = Employee(name="",
             role="manager",
             account=users.get_current_user())
e.hire_date = datetime.datetime.now()
e.put()

::

查詢實體
~~~~~~~~
資料存放區查詢會在指定類別之每個實體上執行，
進而對實體屬性值和屬性金鑰，指定零或多個篩選器以及排序順序。
如果查詢篩選器和排序順序所提及的實體屬性均擁有至少一個值 (可能為空值)，
且屬性值符合所有篩選條件，則系統會傳回實體做為查詢結果。

每個資料存放區查詢都會使用索引，而索引是一個表格，當中列有依需求排序的
查詢結果。「應用服務引擎」應用程式是透過設定檔定義其索引。如果開發網頁
伺服器遇到尚未設定索引的查詢，就會自動將建議新增至這個檔案。您可以在上
傳應用程式之前編輯該檔案，以手動調整索引。如果應用程式變更了資料存放區
實體，資料存放區就會以正確的結果來更新索引。應用程式執行查詢時，資料存
放區會直接從相應的索引擷取結果。

此機制支援的查詢種類十分廣泛，因此也適合大部分應用程式。
不過，此機制並不支援您在其他資料庫技術所慣用的部分查詢種類。

屬性可擁有一或多個值。具有多個值的屬性可擁有混合類型的值。
查詢具有多個值的屬性，可測試是否有值符合查詢條件。
因此，此類屬性在驗證會員資格時十分實用。

與傳統資料庫不同，資料存放區使用分散式架構來支援非常龐大的資料集。
應用服務引擎的應用程式可以透過描述資料物件之間的關聯，
以及透過定義查詢的索引，來最佳化資料分散的方式。

Datastore API (資料存放區 API) 提供兩種查詢介面：
查詢物件介面以及類似 SQL 的查詢語言 (稱為 GQL)。
查詢會以模型類別實例的型式傳回實體，可以修改和放回資料存放區。

training_registration_list = [users.User("Alfred.Smith@example.com"),
                              users.User("jharrison@example.com"),
                              users.User("budnelson@example.com")]

employees_trained = db.GqlQuery("SELECT * FROM Employee WHERE 
                                 account IN :1",
                                training_registration_list)
for e in employees_trained:
    e.new_hire_training_completed = True
    db.put(e)

交易
~~~~
資料存放區可以在單一交易中執行多個操作，並於任何一項操作失敗時，復原整
個交易。這對分散式網路應用程式特別有用，因為在此類應用程式中，可能會出
現多位使用者同時存取或操縱相同資料物件的情形。

使用「應用服務引擎」資料存放區時，每個嘗試建立、更新或刪除實體的動作都
是在「交易」中進行。交易可確保實體的所有變更都儲存在資料存放區，或在操
作失敗時復原這些變更，以保證實體中資料的一致性。

您可以使用 Transaction API (交易 API)，在單一交易中對實體執行多項動作
。舉例來說，如果您要增加某個物件中的計數器欄位值，您必須讀取計數器的值
、計算新的值，再予以儲存。如果沒有交易，其他程序可能會在您讀取和更新的
空檔中，增加計數器數值，導致應用程式覆寫已更新的值。在單一交易中執行讀
取、計算和寫入可以防止其他程序干擾增加計數的過程。

您可以在單一交易中，對多個實體進行變更。為了支援這項功能，「應用服務引
擎」必須事先瞭解哪些實體會同時更新，才能以支援交易的方式儲存這些實體。
建立實體時，您必須宣告此實體與其他實體屬於相同的「實體群組」。所有在交
易中擷取、建立、更新或刪除的實體，均需屬於相同的實體群組。

實體群組
~~~~~~~~
實體群組是由實體關聯性的階層所定義。
如要在群組中建立實體，您必須宣告實體是群組中另一個實體的「子系」，
而另一個實體則是「父系」。

沒有父系的已建立實體是「根實體」，
而沒有子系的根實體則是單獨存在於某個實體群組中。

每個實體與根實體之間，都擁有父子式關聯性路徑 (無父系的實體擁有最短的路
徑)。此路徑是實體完整金鑰的重要元素。在路徑中，每個實體的種類與 識別碼 或
金鑰名稱均可代表完整金鑰。

資料存放區使用「開放式同步存取」管理交易。當應用程式的執行個體對實體群
組中的實體套用變更時，其他嘗試更新群組實體的動作會立即失敗。應用程式可
以再次嘗試交易，以套用更新資料。
