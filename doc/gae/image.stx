Images Python API 總覽
~~~~~~~~~~~~~~~~~~~~~~

「應用服務引擎」的「影像」專屬服務提供操縱影像資料的功能。「影像」服務
可以調整影像大小、旋轉影像、翻轉影像以及裁剪影像；它可以將多個影像合成
單一影像，也可以在多種格式之間轉換影像資料，您還能使用預先定義的演算法
來加強相片的影像效果。此外，API 還可以提供影像的相關資訊，例如格式、寬
度、高度以及色彩值的長條圖。

在 Python 轉換影像
~~~~~~~~~~~~~~~~~~

下列範例會載入資料存放區中的影像資料，然後使用「影像」服務來調整其大小
，並將其以 JPEG 影像的格式傳回瀏覽器。

from google.appengine.api import images

from google.appengine.ext import db
from google.appengine.ext import webapp

class Photo(db.Model):
  title = db.StringProperty()
  full_size_image = db.BlobProperty()

class Thumbnailer(webapp.RequestHandler):
  def get(self):
    if self.request.get("id"):
      photo = Photo.get_by_id(self.request.get("id")) 

      if photo:
        img = images.Image(photo.full_size_image)
        img.resize(width=80, height=100)
        img.im_feeling_lucky()
        thumbnail = img.execute_transforms(output_encoding=images.JPEG)

        self.response.headers['Content-Type'] = 'image/jpeg'
        self.response.out.write(thumbnail)
        return

    # Either "id" wasn't provided, or there was no image with that ID
    # in the datastore.
    self.error(404)

注意：要在本機環境中使用 Images API (影像 API)，您必須先下載並安裝 PIL
 (即 Python 影像程式庫)。 PIL 無法在「應用服務引擎」上使用；它只能在本
機環境中當做「影像 API」的虛設常式使用。只有在「影像 API」中提供的轉換
，才可以在「應用服務引擎」上使用。

支援的影像轉換功能
~~~~~~~~~~~~~~~~~~

「影像」服務可以調整影像大小、旋轉影像、翻轉影像、裁剪影像以及加強相片
的影像效果。它也可以將多個影像合成單一影像。

調整大小
您可以在維持相同比例的情況下，調整影像的大小。
  
旋轉
您可以將影像以 90 度的倍數進行旋轉。
  
水平翻轉
您可以將影像水平翻轉。
  
垂直翻轉
您可以將影像垂直翻轉。
  
裁剪
您可以將影像裁剪為指定的方塊。
  
好手氣
「好手氣」轉換功能會強化影像中的暗色和亮色，並同時將色彩和對比調整為最佳。
  
影像格式
~~~~~~~~

此服務可以接受 JPEG、PNG、GIF (包括動畫 GIF)、BMP、TIFF 以及 ICO 格式
的影像資料，

並可以輸出 JPEG 和 PNG 格式的轉換影像。如果輸入與輸出格式不同，此服務
會先將輸入資料轉換成輸出格式，然後執行轉換。

影像和開發伺服器
開發伺服器會使用本機機器執行「影像」服務的功能。

Python 開發伺服器可以透過 Python Imaging Library (PIL) 模擬「影像」服
務。不過，Python 標準程式庫或 SDK「未包含」這個程式庫，因此必須另外安
裝。 請參閱「安裝 PIL」。

配額和限制

「影像」服務的每個要求會算入 Image Manipulation API Calls (影像操縱
 API 呼叫) 的配額中。在單次 API 呼叫中，應用程式可以執行多次影像轉換。

傳送至「影像」服務的資料會算入「傳送至 (影像) API 的資料」的配額中。從
「影像」服務接收的資料會算入「從 (影像) API 接收的資料」的配額中。

影像的每次轉換會算入「已執行的轉換」的配額中。
如需瞭解配額的詳細資訊，請參閱「配額」，或參閱「管理控制台」的「配額詳
細資訊」一節。

除了配額之外，使用「影像」服務時也需遵循下列限制：
限制	大小
傳送至服務的影像資料大小上限	1 MB
從服務接收的影像資料大小上限	1 MB

使用 Images Python API
----------------------

安裝 PIL
簡介
images API 在本機使用 Python 影像程式庫，以便在本機電腦上測試時轉換影像。您需要下載 PIL 模組，並將它安裝在本機電腦，才能以 SDK 使用影像 API。
在 Windows 安裝 PIL
在 Mac OS X 安裝 PIL
在 Linux 安裝 PIL
在 Windows 安裝 PIL
只要幾個簡單的步驟，就可以在 Windows 完成安裝 PIL：
1. 從 PIL 網站下載 Windows 安裝程式。
2. 按兩下安裝程式，開始安裝程序。
3. 選擇正確的目錄供 PIL 進行安裝。
4. 完成安裝，並於本機測試我們的範例應用程式。
在 Mac OS X 安裝 PIL
只要幾個簡單的步驟，就可以在 Mac OS X 10.4 和 10.5 完成安裝 PIL：
1. 從 http://pythonmac.org 下載 Mac 安裝程式。
2. 安裝套件。
3. 完成安裝，並於本機測試我們的範例應用程式。
若使用 MacPorts 或 Darwin Ports 下列網站會對您有所幫助：
安裝 PIL 與 MacPorts
安裝 PIL 與 Darwin Ports
在 Linux 安裝 PIL
使用下列命令在 Linux 安裝 PIL：
  sudo apt-get install python-imaging
簡介
Images API (影像 API) 可讓您執行常見的影像轉換，
例如調整大小、旋轉、以及調整色彩及對比等。
這些轉換通常會發生在使用者上傳的影像或照片內容。
本文件描述上傳、轉換、儲存以及動態服務影像等程序。
我們將使用入門指南中的「訪客留言板」範例，並且加以修改，
讓使用者可以上傳他們的顯示圖片和問候語。

建立影像屬性
~~~~~~~~~~~~
首先，我們要更新訪客留言板範例的模型，將上傳的影像儲存為 blob。
class Greeting(db.Model):
  author = db.UserProperty()
  content = db.StringProperty(multiline=True)
  avatar = db.BlobProperty()
  date = db.DateTimeProperty(auto_now_add=True)

上傳使用者影像
~~~~~~~~~~~~~~

接著，我們要修改表單以新增其他欄位，讓使用者從電腦中選擇要上傳的檔案。我們也會新增 enctype 屬性 (attribute) 到表單標記，以指出我們希望這是「多部分表單張貼」。
self.response.out.write("""
          <form action="/sign" enctype="multipart/form-data" method="post">
            <div><label>Message:</label></div>
            <div><textarea name="content" rows="3" cols="60"></textarea></div>
            <div><label>Avatar:</label></div>
            <div><input type="file" name="img"/><</div>
            <div><input type="submit" value="Sign Guestbook"></div>
          </form>
        </body>
      </html>""")
這樣我們就有了具有兩個欄位的簡易表單。

此時，我們也要更新「訪客留言板」處理常式，從表單張貼取得影像資料，並將

它以 Blob 類型儲存在資料存放區。
class Guestbook(webapp.RequestHandler):
  def post(self):
    greeting = Greeting()
    if users.get_current_user():
      greeting.author = users.get_current_user()
    greeting.content = self.request.get("content")
    avatar = self.request.get("img")
    greeting.avatar = db.Blob(avatar)
    greeting.put()
    self.redirect('/')
轉換影像
我們將為「訪客留言板」應用程式，建立 32x32 的顯示圖片。首先，我們要匯入 google.appengine.api.images 模組。然後，我們要呼叫 resize 函式，並傳入影像資料。
from google.appengine.api import images

class Guestbook(webapp.RequestHandler):
  def post(self):
    greeting = Greeting()
    if users.get_current_user():
      greeting.author = users.get_current_user()
    greeting.content = self.request.get("content")
    avatar = images.resize(self.request.get("img"), 32, 32)
    greeting.avatar = db.Blob(avatar)
    greeting.put()
    self.redirect('/')

動態服務影像
~~~~~~~~~~~~
最後，我們要建立影像處理常式，它會動態服務 /img 路徑的這些影像。
我們也會更新 HTML，以動態展示這些服務的影像。

class Image (webapp.RequestHandler):
  def get(self):
    greeting = db.get(self.request.get("img_id"))
    if greeting.avatar:
      self.response.headers['Content-Type'] = "image/png"
      self.response.out.write(greeting.avatar)
    else:
      self.error(404)

在影像處理常式中，我們會從要求取得 img_id。
我們需要更新「訪客留言板」的 HTML，將訊息的金鑰傳遞給影像處理常式。

self.response.out.write("<div><img src='img?img_id=%s'></img>" %
                              greeting.key())
self.response.out.write(' %s</div>' %
                              cgi.escape(greeting.content))

我們現在已經完成修改好的「訪客留言板」應用程式：

import cgi
import datetime
import logging

from google.appengine.ext import db
from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.api import images

logging.getLogger().setLevel(logging.DEBUG)


class Greeting(db.Model):
  author = db.UserProperty()
  content = db.StringProperty(multiline=True)
  avatar = db.BlobProperty()
  date = db.DateTimeProperty(auto_now_add=True)

class MainPage(webapp.RequestHandler):
  def get(self):
    self.response.out.write('<html><body>')
    query_str = "SELECT * FROM Greeting ORDER BY date DESC LIMIT 10"
    greetings = db.GqlQuery (query_str)
        
    for greeting in greetings:
      if greeting.author:
        self.response.out.write('<b>%s</b> wrote:' % greeting.author.nickname())
      else:
        self.response.out.write('An anonymous person wrote:')
      self.response.out.write("<div><img src='img?img_id=%s'></img>" %
                              greeting.key())
      self.response.out.write(' %s</div>' %
                              cgi.escape(greeting.content))

    self.response.out.write("""
          <form action="/sign" enctype="multipart/form-data" method="post">
            <div><label>Message:</label></div>
            <div><textarea name="content" rows="3" cols="60"></textarea></div>
            <div><label>Avatar:</label></div>
            <div><input type="file" name="img"/></div>
            <div><input type="submit" value="Sign Guestbook"></div>
          </form>
        </body>
      </html>""")

class Image (webapp.RequestHandler):
  def get(self):
    greeting = db.get(self.request.get("img_id"))
    if greeting.avatar:
      self.response.headers['Content-Type'] = "image/png"
      self.response.out.write(greeting.avatar)
    else:
      self.response.out.write("No image")

class Guestbook(webapp.RequestHandler):
  def post(self):
    greeting = Greeting()
    if users.get_current_user():
      greeting.author = users.get_current_user()
    greeting.content = self.request.get("content")
    avatar = images.resize(self.request.get("img"), 32, 32)
    greeting.avatar = db.Blob(avatar)
    greeting.put()
    self.redirect('/')


application = webapp.WSGIApplication([
  ('/', MainPage),
  ('/img', Image),
  ('/sign', Guestbook)
], debug=True)


def main():
  run_wsgi_app(application)


if __name__ == '__main__':
  main()

Image 類別
~~~~~~~~~~
Image 類別的實例代表單一影像，它可以套用多種轉換。實例的方法會設定轉換，在呼叫 execute_transforms() 方法時會一次執行所有的轉換。
Image 是由 google.appengine.api.images 模組所提供。
簡介
Image()
屬性：
width
height
實例方法：
resize()
crop()
rotate()
horizontal_flip()
vertical_flip()
im_feeling_lucky()
execute_transforms()
histogram()
簡介
Image 類別是用來封裝影像資訊和該影像的轉換。
對影像物件呼叫一或多個轉換之後，您可以用execute_transforms() 方法來執行轉換。
注意：每個轉換都會按照要求的順序來套用，而且每個影像的每個 execute_transforms() 呼叫只能呼叫一次。
建構函式
class Image(image_data)
要轉換的影像。
引數：
image_data
影像資料，為 bytestring (str)。影像資料可以編碼為 JPEG、PNG、GIF (包括動畫的)、BMP、TIFF 或 ICO 格式。
屬性
Image 實例具有下列屬性：
width
影像的寬度 (像素)。
height
影像的高度 (像素)。
實例方法
Image 實例具有下列方法：
resize(width=0, height=0)
調整影像大小，縮放至指定的寬度和高度。
引數：
width
想要的寬度，以像素數字表示。必須是 int 或 long。
height
想要的高度，以像素數字表示。必須是 int 或 long。
crop(left_x, top_y, right_x, bottom_y)
根據指定的邊框範圍剪裁影像。方法會以相同格式傳回轉換後的影像。
邊框範圍的上、下、左、右會按照比例來指定。邊框範圍的座標會由 left_x * width、top_y * height、right_x * width 以及 bottom_y * height 來決定。這樣可讓您個別指定邊框範圍 (即影像) 的最終寬度和高度，這可能會與調整大小的動作同時發生。
引數：
left_x
邊框範圍的左邊框，影像寬度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
top_y
邊框範圍的上邊框，影像高度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
right_x
邊框範圍的右邊框，影像寬度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
bottom_y
邊框範圍的下邊框，影像高度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
rotate(degrees)
旋轉影像。 旋轉的量必須是 90 度的倍數。
旋轉會以順時鐘方向進行。90 度的旋轉會讓原來在上方的邊旋轉至右邊。
引數：
degrees
要旋轉影像的量 (度數)，為 90 度的倍數。必須是 int 或 long。
horizontal_flip()
水平翻轉影像。原本的左邊會翻轉為右邊，反之亦然。
vertical_flip()
垂直翻轉影像。原本在上方的邊會翻轉為下方，反之亦然。
im_feeling_lucky()
根據改善照片的演算法，調整影像的對比和色彩。這與「Google Picasa 網路相簿」的「好手氣」功能類似。方法會以相同格式傳回轉換後的影像。
注意：im_feeling_lucky() 方法在本機 SDK 中使用時，沒有任何作用，因為在 PIL 中沒有同等的方法。
execute_transforms(output_encoding=images.PNG)
以上述方法對 Image 實例執行所有轉換，並傳回結果。
引數：
output_encoding
想要的轉換後影像格式。可以是 images.PNG 或 images.JPEG。 預設為 images.PNG。
傳回值就是產生的影像，它是以指定格式編碼的 bytestring。
histogram()
計算影像色彩值的色階分佈圖。
傳回包含三列的清單，其中的值分別為紅、綠和藍三色的總值。每個色彩清單包含每 256 色值出現的計數，以色彩值排序 (第 0 個元素包含值 0 的計數，而第 255 個元素為值 255 的計數)。


函式
~~~~
google.appengine.api.images 套件提供下列函式：
resize(image_data, width=0, height=0, output_encoding=images.PNG)
調整影像大小，縮放至指定的寬度和高度。函式接受影像資料以調整大小，並以相同格式傳回轉換後的影像。
引數：
image_data
要調整大小的影像，為 bytestring (str) 的 JPEG、PNG、GIF (包括動畫的)、BMP、TIFF 或 ICO 格式。
width
想要的寬度，以像素數字表示。必須是 int 或 long。
height
想要的高度，以像素數字表示。必須是 int 或 long。
output_encoding
想要的轉換後影像格式。可以是 images.PNG 或 images.JPEG。 預設為 images.PNG。
crop(image_data, left_x, top_y, right_x, bottom_y), output_encoding=images.PNG)
根據指定的邊框範圍剪裁影像。函式接受影像資料以進行裁剪，並以相同格式傳回轉換後的影像。
邊框範圍的上、下、左、右會按照比例來指定。邊框範圍的座標會由 left_x * width、top_y * height、right_x * width 以及 bottom_y * height 來決定。這樣可讓您個別指定邊框範圍 (即影像) 的最終寬度和高度，這可能會與調整大小的動作同時發生。
引數：
image_data
要進行裁剪的影像，為 bytestring (str) 的 JPEG、PNG、GIF (包括動畫的)、BMP、TIFF 或 ICO 格式。
left_x
邊框範圍的左邊框，影像寬度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
top_y
邊框範圍的上邊框，影像高度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
right_x
邊框範圍的右邊框，影像寬度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
bottom_y
邊框範圍的下邊框，影像高度的比例，以 0.0 到 1.0 (含) 的 float 值來指定。
output_encoding
想要的轉換後影像格式。可以是 images.PNG 或 images.JPEG。 預設為 images.PNG。
rotate(image_data, degrees, output_encoding=images.PNG)
旋轉影像。 旋轉的量必須是 90 度的倍數。函式接受影像資料以進行旋轉，並以相同格式傳回轉換後的影像。
旋轉會以順時鐘方向進行。90 度的旋轉會讓原來在上方的邊旋轉至右邊。
引數：
image_data
要進行旋轉的影像，為 bytestring (str) 的 JPEG、PNG、GIF (包括動畫的)、BMP、TIFF 或 ICO 格式。
degrees
要旋轉影像的量 (度數)，為 90 度的倍數。
output_encoding
想要的轉換後影像格式。可以是 images.PNG 或 images.JPEG。 預設為 images.PNG。
horizontal_flip(image_data, output_encoding=images.PNG)
水平翻轉影像。原本的左邊會翻轉為右邊，反之亦然。函式接受影像資料以進行翻轉，並以相同格式傳回轉換後的影像。
引數：
image_data
要進行翻轉的影像，為 bytestring (str) 的 JPEG、PNG、GIF (包括動畫的)、BMP、TIFF 或 ICO 格式。
output_encoding
想要的轉換後影像格式。可以是 images.PNG 或 images.JPEG。 預設為 images.PNG。
vertical_flip(image_data, output_encoding=images.PNG)
垂直翻轉影像。原本在上方的邊會翻轉為下方，反之亦然。函式接受影像資料以進行翻轉，並以相同格式傳回轉換後的影像。
引數：
image_data
要進行翻轉的影像，為 bytestring (str) 的 JPEG、PNG、GIF (包括動畫的)、BMP、TIFF 或 ICO 格式。
output_encoding
想要的轉換後影像格式。可以是 images.PNG 或 images.JPEG。 預設為 images.PNG。
im_feeling_lucky(image_data, output_encoding=images.PNG)
根據改善照片的演算法，調整影像的對比和色彩。這與「Google Picasa 網路相簿」的「好手氣」功能類似。函式接受影像資料以進行調整，並以相同格式傳回轉換後的影像。
引數：
image_data
要進行調整的影像，為 bytestring (str) 的 JPEG、PNG、GIF (包括動畫的)、BMP、TIFF 或 ICO 格式。
output_encoding
想要的轉換後影像格式。可以是 images.PNG 或 images.JPEG。 預設為 images.PNG。
注意：im_feeling_lucky() 方法在本機 SDK 中使用時，沒有任何作用，因為在 PIL 中沒有同等的方法。
histogram(image_data)
計算影像色彩值的色階分佈圖。
傳回包含三列的清單，其中的值分別為紅、綠和藍三色的總值。每個色彩清單包含每 256 色值出現的計數。
composite(inputs, width, height, color=0, output_encoding=PNG)
從多個影像產生一個複合影像。
引數：
inputs
複合時使用的影像，為 tuple 清單。每個 tuple 必須包含 5 個元素：
影像資料，為位元組字串 (str)
從錨定位置將影像置於畫布的 x 位移，以像素數字表示 (可能為負值)
從錨定位置將影像置於畫布的 y 位移，以像素數字表示 (可能為負值)
影像的不透明度，為介於 0.0 和 1.0 (含) 的浮點數值
畫布中的錨定位置，為下列其中之一：TOP_LEFT TOP_CENTER TOP_RIGHT CENTER_LEFT CENTER_CENTER CENTER_RIGHT BOTTOM_LEFT BOTTOM_CENTER BOTTOM_RIGHT
影像會依照出現在清單中的順序來複合，第一個影像會第一個套用 (在其他影像的「底下」)。
width
複合影像的畫布寬度，以像素數字表示。
height
複合影像的畫布高度，以像素數字表示。
color
複合影像畫布的背景色彩，以不帶正負號的 32 位元整數表示，其中每個色頻以一個位元組表示，並以 Alpha 色頻、紅、綠、藍的順序來排列。預設為 0 (黑色)。
output_encoding
最終複合影像的格式，為 PNG 或 JPEG。預設為 PNG。
以要求的格式將複合影像資料以位元組字串方式傳回。


例外狀況
~~~~~~~~
google.appengine.api.images 套件提供下列例外狀況類別：
exception Error()
這是此套件中所有例外狀況的基礎類別。
exception TransformationError()
嘗試轉換影像時發生錯誤。
exception BadRequestError()
轉換參數無效。
exception NotImageError()
指定的影像資料不是可識別的影像格式。
exception BadImageError()
指定的影像資料毀損。
exception LargeImageError()
指定的影像資料太大而無法處理。
