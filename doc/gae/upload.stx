上傳資料
appcfg.py 工具可以上傳資料到您的應用程式資料存放區。只需要稍做設定，即可從 CSV 檔案建立新的資料存放區實體。大多數的試算表應用程式都可以匯出 CSV 檔案，這讓非開發人員和其他應用程式可以輕易地產生可匯入至應用程式的資料。
2009 年 4 月： Python SDK 的版本 1.2.1 內含可下載資料的初期功能，與資料上傳功能類似。此功能目前尚無法透過 appcfg.py 提供，但如果您想要嘗試此功能，請參考 bulkloader.py。 未來發行的 SDK 完整版本將包括此功能的完整功能和文件。
設定 remote_api
安裝 Sqlite (建議)
建立載入器類別
準備您的資料
上傳資料到「應用服務引擎」
將資料載入開發伺服器
命令列引數
設定 remote_api
資料載入器功能使用 remote_api 與「應用服務引擎」上執行的應用程式通訊，這是內含在「應用服務引擎」Python 程式庫中的要求處理常式，可允許具有適當認證的遠端應用程式遠端存取資料存放區。若要使用 remote_api，您必須將 URL 對應到 app.yaml 檔案中的 remote_api。
編輯您的 app.yaml，並在 handlers: 區段新增下列幾行程式碼：
- url: /remote_api
  script: $PYTHON_LIB/google/appengine/ext/remote_api/handler.py
  login: admin
這會將 remote_api 要求處理常式對應到應用程式的 URL /remote_api。您可以使用任何 URL。存取此 URL 的使用者僅限於應用程式的管理員。
更新您的應用程式以安裝新的 app.yaml 和 remote_api URL：
appcfg.py update
安裝 Sqlite (建議)
上傳資料時，appcfg.py upload_data 會使用資料檔案來追蹤其進度，以免發生上傳中斷並需要在資料檔案的中間重新啟動的情況。此功能需要 Sqlite 3 程式庫才能管理進度檔案。如果您的系統未安裝 Sqlite 3，請參閱 Sqlite 網站以取得下載和安裝 Sqlite 3 的資訊。
注意：如果您編譯 Python 的原始程式碼來安裝 Python，則安裝 Sqlite 之後，您需要以含 Sqlite 支援的 Python 來重新編譯。
您可以藉由輸入下列命令，測試是否已在 Python 安裝 Sqlite。
python -c 'import sqlite3'
如果命令無任何作用，則表示已安裝 Sqlite 3。如果未安裝 Sqlite 3，則會列出：ImportError: No module named sqlite3
如果您不想安裝 Sqlite 3，您可以停用進度檔案。若要進行此動作，請提供 appcfg.py upload_data 此引數：--db_filename=skip 如果停用進度檔案並中斷上傳，則當您重新啟動上傳時，您將需要編輯 CSV 檔案以避免建立重複的實體。
建立載入器類別
若要告訴 appcfg.py upload_data 如何將 CSV 檔案中的每一行轉譯為資料存放區實體，請在 Python 來源檔案中定義載入器類別。該檔案會匯入或定義建立的實體 Model 類別，並定義您想要匯入之每一種類的載入器類別。
例如，假設您有一個名為 Album 的 Model 類別，且定義於名為 models.py 的檔案中 (位於您的 PYTHONPATH，執行工具的目錄)，如下所示：
from google.appengine.ext import db

class Album(db.Model):
  artist = db.StringProperty()
  title = db.StringProperty()
  publication_date = db.DateProperty()
  length_in_minutes = db.IntegerProperty()
您想要匯入之 CSV 檔案的欄位順序如下： title、artist、publication date 及 length in minutes。 CSV 檔案中有代表每個值的字串。
下列為此資料的載入器類別：
import datetime
from google.appengine.ext import db
from google.appengine.tools import bulkloader
import models

class AlbumLoader(bulkloader.Loader):
  def __init__(self):
    bulkloader.Loader.__init__(self, 'Album',
                               [('title', str),
                                ('artist', str),
                                ('publication_date',
                                 lambda x: datetime.datetime.strptime(x, '%m/%d/%Y').date()),
                                ('length_in_minutes', int)
                               ])

loaders = [AlbumLoader]
批次載入器工具會在 loaders 載入器類別檔案中尋找全域變數，檔案中的值為要使用的載入器類別清單。在此範例中，工具會載入 AlbumLoader 類別以載入種類 Album 的實體。
載入器類別會定義 __init__() 方法，該方法將呼叫 Loader 類別中的 __init__()。第一個引數為 self，載入器類別實例。第二個引數為字串形式的資料庫存放區種類名稱，在這裡為 'Album'。 第三個引數為 tuple 的序列，其中每個 tuple 包含屬性 (字串) 名稱和轉換函式。轉換函式必須接受字串，並傳回其中一個資料存放區值類型。
在這個範例中，'title' 和 'artist' 屬性都接受字串值，所以轉換函式為 str (字串建構函式)。'length_in_minutes' 屬性接受整數，int 建構函式接受字串，並將其轉換成整數值。
針對 'publication_date' 屬性，模型需要 datetime 值。在此情況下，我們知道 (從資料檔案) publication date 會以 mm/dd/yyyy 格式表示。轉換函式為接受字串的 Python lambda 運算式 (短函式)，然後將它與模式一起傳遞給 datetime.datetime.strptime() 以將值剖析為 datetime.datetime，然後呼叫其 date() 方法以取得最終 datetime.date 值。
如果任何轉換函式發生例外狀況，或無法傳回符合 Model 類別需求的值，則資料檔案的處理會停止並報告錯誤。如果您使用的是進度檔案 (上述的 Sqlite)，且您可以修正 CSV 檔案 (或程式碼，視需要而定)，則請繼續從錯誤發生的那一行開始重新執行上傳。
如果包含載入器類別定義的檔案名稱為 album_loader.py，請提供 appcfg.py upload_data 下列引數：--config_file=album_loader.py
準備您的資料
appcfg.py upload_data 接受格式為 CSV (逗點分隔值) 檔案的資料，這是一個代表數值表格的簡單文字檔案，每行每列和欄位都使用逗點來區隔 (,)。如果值包含一或多個逗點，則值會以雙引號包圍 (")。如果值包含雙引號，則雙引號會出現兩次 ("")。 工具會使用 Python 標準程式庫的 csv 模組來剖析資料檔案。
檔案必須在文字資料使用 UTF-8 編碼。UTF-8 編碼與 ASCII 編碼相容，所以任何將 CSV 儲存為 ASCII 的試算表應用程式都將可以運作。
大部分的試算表應用程式可以匯出 CSV 檔案的工作表。若要從 Google 試算表匯出 CSV 工作表，請選擇 [檔案] (File) 功能表 > [匯出] (Export) > [僅 .csv 工作表] (.csv Sheet Only)，然後從開啟的瀏覽器視窗中儲存檔案。
如果要載入的 CSV 檔案名稱為 album_data.csv，請提供 appcfg.py upload_data 下列引數：--filename=album_data.csv
如果 CSV 檔案的第一行不是資料 (例如，有標題列)，請使用下列選項來跳過第一行：--has_header
上傳資料到「應用服務引擎」
若要開始資料上傳，請執行 appcfg.py upload_data 並搭配適當的引數：
appcfg.py upload_data --config_file=album_loader.py --filename=album_data.csv --kind=Album <app-directory>
如果您使用的是「Google 應用服務」網域名稱，且需要利用該網域中的帳戶使用 appcfg.py 登入，則您必須指定 --auth_domain=... 選項，其中的值為您的網域名稱。
將資料載入開發伺服器
如果您想在上傳資料之前先測試該資料與應用程式的互動，您可以將資料載入開發伺服器。使用 --url 選項來指出開發伺服器 URL 中的工具。例如：
appcfg.py upload_data --config_file=album_loader.py --filename=album_data.csv --kind=Album --url=http://localhost:8080/remote_api <app-directory>
命令列引數
appcfg.py upload_data 命令接受下列引數。請參閱 appcfg.py 可接受的所有動作的其他選項，列在上傳和管理 Python 應用程式：命令列引數中。
appcfg.py upload_data [options] <app-directory>
--filename=...
必要。要載入的 CSV 資料檔案路徑。
--kind=...
必要。要用來建立新實體的資料存放區種類名稱。
--config_file=...
必要。Python 來源檔案，可匯入或定義上傳建立之實體種類的 Model 類別以及每個種類的 Loader 類別。評估此檔案時，appcfg.py upload_data 會提供本機命名空間的 Loader 基礎類別。
--loader_opts=...
傳遞給 Loader 類別 initialize() 方法的選項。您可以實作此方法，將引數傳遞給 Loader 類別。
--log_file=...
寫入上傳記錄資訊的檔案名稱。預設為在目前的工作目錄中建立名為 bulkloader-log-timestamp 的檔案 (其中 timestamp 為工具執行的時間)。
--auth_domain=...
用來連絡 remote_api 的帳戶授權網域名稱。如果您使用的是「Google 應用服務」網域，且需要利用「Google 應用服務」帳戶使用 appcfg.py 登入，請以此選項指定您的網域名稱。
--num_threads=#
平行上傳新實體所要產生的執行緒數目。預設為 10。
--batch_size=#
每個 remote_api 呼叫建立的實體數目。針對大型實體，請使用較小的批次大小來限制每個批次的資料量。預設為 10。
--bandwidth_limit=#
所有執行緒應該傳送的每秒位元組數上限。高載可能會超出此上限，但整體頻寬會小於此數目。預設為每秒 250,000 位元組。
--rps_limit=#
所有執行緒應該傳送的每秒記錄數上限。預設為 20。
--http_limit=#
所有執行緒應該傳送的每秒 HTTP 要求數上限。預設為每秒 7.5 (每兩秒 15 個)。
--db_filename=...
在此執行用於進度檔案的檔案名稱。如果未指定，則會命名為 bulkloader-progress-timestamp，其中 timestamp 代表命令執行的時間。如果指定此引數時搭配值 skip，則上傳將不會使用進度檔案。
--has_header
如有指定，請跳過 CSV 檔案的第一行，假設它是標題列。
--app_id=...
應用程式 ID (如果和應用程式 app.yaml 中指定的應用程式 ID 不同)。
--url=...
用來連絡資料存放區的 remote_api 處理常式 URL。根據預設，這將由應用程式 app.yaml 檔案衍生出來。
