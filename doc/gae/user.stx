帳戶管理(user)
--------------
GAE 可以驗證「Google 帳戶」之使用者，
偵測目前使用者是不是透過「Google 帳戶」登入，
還能夠將使用者重新導向「Google 帳戶」登入網頁，
協助使用者登入或者建立新的帳戶。

使用者登入 GAE 之後，
程式師即可存取使用者之電子郵件地址和唯一的使用者 ID。
應用程式也能夠偵測目前的使用者是否為管理員，
以便實作應用程式的管理員專屬區域。

「Google 帳戶」整合是「應用服務引擎」的選用功能。
如果您不想整合您的應用程式和「Google 帳戶」，
您隨時可以建立自己的使用者驗證系統。
「Google 帳戶」提供強大、易用的驗證機制，
這個機制的功能完善，且擁有數百萬個使用者。

登入
~~~~
程式師可自訂歡迎訊息和登出連結來讓使用者以「Google 帳戶」登入應用程式。
如果使用者未登入，應用程式會提供「Google 帳戶」登入畫面的連結，

如下例::

  from google.appengine.api import users

  class MyHandler(webapp.RequestHandler):
      def get(self):
        user = users.get_current_user()
        if user:
            greeting = ("Welcome, %s! (<a href=\"%s\">sign out</a>)" %
                       (user.nickname(), 
                        users.create_logout_url("/intl/zh-TW/")))
        else:
            greeting = ("<a href=\"%s\">Sign in or register</a>." %
                      users.create_login_url("/intl/zh-TW/"))

        self.response.out.write("<html><body>%s</body></html>" % greeting)

強制登入和管理存取
~~~~~~~~~~~~~~~~~~
若使用者必須登入才能存取某些網頁，
則可以在 app.yaml 為這些網頁設定處理常式以要求使用者登入。

如果使用者想存取需要先登入的 URL，但該使用者並未登入，
則「應用服務引擎」會自動將使用者重新導向到「Google 帳戶」登入頁面，
然後於使用者登入或註冊成功之後讓使用者返回該 URL。

處理常式設定也可以要求使用者必須是已註冊的應用程式管理員。
這會讓實作網站的管理員專區變得很容易，因為您不需要另外實作授權機制。

取得目前登入使用者
~~~~~~~~~~~~~~~~~~
user = users.get_current_user()

驗證系統管理者
~~~~~~~~~~~~~~
應用程式可以測試目前登入的使用者，
是否為應用程式的已註冊系統管理員。

系統管理員是可以存取應用程式管理控制台的使用者。
您可以使用「管理控制台」來管理哪些使用者可具有系統管理狀態。

若目前使用者是應用程式的系統管理員，
則函式 users.is_current_user_admin() 會傳回 True，如下例::

  user = users.get_current_user()

  if user:
    print "Welcome, %s!" % user.nickname()
    if users.is_current_user_admin():
      print "<a href=\"/admin/\">Go to admin area</a>"

限制 URL 僅系統管理者訪問
~~~~~~~~~~~~~~~~~~~~~~~~~
任何 URL 處理常式可以設定 login，
以限制訪客必須是已登入的使用者，或是僅限於應用程式的管理員。

若 URL 處理常式的 login 設定符合 URL，
處理常式會先檢查使用者是否已經以 Google 帳戶登入應用程式。
若否，會將使用者重新導向至 Google 登入頁面，
並於登入或建立帳戶後，再重新導向回到應用程式 URL。

若設定為 login: required，一旦使用者登入後，處理常式會正常地繼續。

若設定為 login: admin，一旦使用者登入後，
處理常式會檢查使用者是否為應用程式的管理員。
若否，使用者會看到錯誤訊息。若使用者為管理員，則處理常式會繼續。
若應用程式需要不同的行為，該應用程式可以實作讓使用者自行處理。 如下例::
  handlers:

  - url: /profile/.*
    script: user_profile.py
    login: required

  - url: /admin/.*
    script: admin.py
    login: admin

  - url: /.*
    script: welcome.py

登入和登出
~~~~~~~~~~
應用程式可以偵測使用者是不是透過「Google 帳戶」登入應用程式。
如果使用者尚未登入，
應用程式可以將使用者導向「Google 帳戶」進行登入或建立新的 Google 帳戶。

應用程式會呼叫一種 Users API (使用者 API) 方法，
以取得「Google 帳戶」登入畫面的 URL。
應用程式可以顯示這個 URL 的連結，或是在使用者瀏覽的頁面需要驗證時，
發出這個 URL 的重新導向。

「Google 帳戶」登入畫面會告知使用者他正在登入您的應用程式，
而畫面顯示的應用程式名稱為您註冊應用程式時所選擇的名稱。

如要變更應用程式名稱，
請至「管理控制台」的 [Application Settings] (應用程式設定) 區段。

使用者登入或建立 Google 帳戶之後，將被重新導向您的應用程式。
應用程式會將重新導向 URL 提供給產生登入 URL 的方法。
此外，「使用者 API」也包含一種產生登出 URL 的方法，
可以用於登出應用程式。
登出 URL 會解除使用者在應用程式的驗證，
然後在不顯示任何資訊的狀況下，
重新導向應用程式的 URL。

使用者如要登入應用程式，必須等候應用程式提示，
然後輸入帳戶的電子郵件地址和密碼。
即便使用者已經透過「Google 帳戶」登入其他應用程式，也必須遵循上述程序。

存取帳戶資訊
~~~~~~~~~~~~
使用者登入應用程式之後，只要使用者對應用程式發出要求，
應用程式即可存取這個帳戶的電子郵件地址。
就算使用者變更了帳戶的電子郵件地址，應用程式也可以存取使用者 ID，
以識別使用者的唯一身分。

應用程式還可以判斷目前的使用者是否為應用程式的管理員 (「開發人員」)。
即使您不是使用「Google 帳戶」驗證其他使用者，
您仍可以使用這個功能，為應用程式建立管理功能。

透過 Java 和 Python API，您可以輕易地將 URL 設為「管理員專屬」。

使用者和資料存放區
~~~~~~~~~~~~~~~~~~
「應用服務引擎」資料存放區能夠將 Google Accounts API 所傳回的 User 物件儲存為特殊值類型。

截至筆者撰稿時，User 值尚「無法」做為使用者的穩定識別碼：
如果應用程式儲存了 User 值，使用者卻變更了電子郵件地址，
則 User 值將無法繼續參照有效的使用者。
實際上，使用者很少變更自己的「Google 帳戶」電子郵件地址，
不過設計時仍需將這些罕見案例納入考量。
往後的服務更新可能會自動更新資料存放區中的 User 值。
在那之前，最好不要依賴 User 值的穩定性。

User 物件會提供一個唯一的使用者 ID，
而這個 ID 在使用者帳戶的留存期間絕對穩定，
即使變更電子郵件地址也不會造成影響。

在資料存放區實體金鑰或屬性值中，您可以使用這個值。
如要在資料存放區中，同時查詢電子郵件地址和使用者識別碼，
您可以將 User 物件和物件的使用者 ID 儲存為個別屬性。

Google 帳戶和開發伺服器
~~~~~~~~~~~~~~~~~~~~~~~
開發伺服器會使用虛擬登入畫面，模擬「Google 帳戶」系統。
當您的應用程式為取得登入畫面的 URL 而呼叫「使用者 API」時，
API 會傳回特殊的開發伺服器 URL；該 URL 會提示使用者輸入電子郵件地址，
但是不必輸入密碼。您可以在提示中輸入任何電子郵件地址，
應用程式將認為您已經使用該地址的帳戶登入。

虛擬登入畫面也包括一個核取方塊，可指示虛擬帳戶是否為管理員。
如果選取這個核取方塊，應用程式將認為您已經使用管理員帳戶登入。
同樣地，「使用者 API」會傳回登出 URL，供您取消虛擬登入。

User
~~~~
User 類別的實例，代表一位使用者。User 實例是唯一的，且可以比較。
若兩個實例相等，則它們代表相同使用者。

在開發伺服器中，User 物件的唯一 ID 是使用電子郵件地址計算的結果。
兩個唯一的電子郵件地址永遠代表開發伺服器兩個唯一的使用者。

應用程式可以透過呼叫 users.get_current_user() 函式來存取目前使用者的 
User 實例。

from google.appengine.api import users

user = users.get_current_user()
if not user:
  # The user is not signed in.
else:
  print "Hello, %s!" % user.nickname()

User 實例也可以從電子郵件地址來建構。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
user = users.User("Albert.Johnson@example.com")
若以電子郵件地址呼叫 User 建構函式，
但是該電子郵件地址沒有對應到有效的 Google 帳戶，仍然會建立物件，
但是不會對應到真正的 Google 帳戶。此情況就是在物件儲存之後，
人員再以指定的電子郵件地址建立 Google 帳戶。
具有電子郵件地址的 User 值，在建立時若不代表 Google 帳戶，
則該 User 值將不會代表真正使用者的 User 值。

在開發網頁伺服器之下執行時，所有 User 物件儲存在 (模擬的) 資料存放區時，
會假設為代表有效的 Google 帳戶。

有效使用者的 User 物件可提供唯一 ID 值給使用者，
即使使用者變更電子郵件地址也會維持不變。user_id() 方法會傳回此 ID，
一個 str 值。

使用 User 值和資料存放區
~~~~~~~~~~~~~~~~~~~~~~~~
User 實例可以是資料存放區屬性值。
class UserPrefs(db.Model):
  user = db.UserProperty()

user = users.get_current_user()
if user:
  q = db.GqlQuery("SELECT * FROM UserPrefs WHERE user = :1", user)
  userprefs = q.get()
在資料存放區內，值等於電子郵件地址加上使用者的唯一 ID。 如果使用者變更電子郵件地址，則新的 User 值將與資料存放區查詢的原始 User 值不同，也與應用程式進行比較時的原始 User 值不同。如果應用程式需要固定、不會變更的識別碼，您可以分開存放唯一 ID 與 User 值。

登入登出之 URL
~~~~~~~~~~~~~~
Users API (使用者 API) 提供建構「Google 帳戶」URL 的功能，
可允許使用者登入或登出，然後重新導向回到您的應用程式。

users.create_login_url() 和 users.create_logout_url() 
二者都接受應用程式的目的地 URL，並傳回「Google 帳戶」URL，
以便登入或登出，並在之後重新導向至指定的 URL。

from google.appengine.api import users

class MyHandler(webapp.RequestHandler):
  def get(self):
    user = users.get_current_user()
    if user:
      greeting = ("Welcome, %s! (<a href=\"%s\">sign out</a>)" %
                  (user.nickname(), users.create_logout_url("/intl/zh-TW/")))
    else:
      greeting = ("<a href=\"%s\">Sign in or register</a>." %
                  users.create_login_url("/intl/zh-TW/"))

    self.response.out.write("<html><body>%s</body></html>" % greeting)

開發網頁伺服器使用其本身的登入和登出功能，來模擬「Google 帳戶」。
您在開發網頁伺服器上登入應用程式時，
伺服器會提示您輸入該工作階段要使用的電子郵件地址。
請參閱開發網頁伺服器以取得詳細資訊。
提示：如果想將應用程式的一部分限制為只有系統管理員可以存取，
簡單的方式就是使用 URL 處理常式的 login: required 設定元素。
請參閱設定應用程式。

管理員使用者
~~~~~~~~~~~~
應用程式可以測試目前登入的使用者，是否為應用程式的已註冊系統管理員。
系統管理員是可以存取應用程式管理控制台的使用者。
您可以使用「管理控制台」來管理哪些使用者可具有系統管理狀態。
若目前使用者是應用程式的系統管理員，
則函式 users.is_current_user_admin() 會傳回 True。
user = users.get_current_user()

if user:
  print "Welcome, %s!" % user.nickname()
  if users.is_current_user_admin():
    print "<a href=\"/admin/\">Go to admin area</a>"
提示：您可以使用 URL 處理常式的 login: admin 設定元素，輕鬆地將應用程式的某一部分限制為只有系統管理員可以存取的部分。請參閱設定應用程式。

User 類別
~~~~~~~~~
User 類別的實例代表具有 Google 帳戶的使用者。
由 google.appengine.api.users 模組所提供。

User 類別的實例代表具有 Google 帳戶的使用者。應用程式可以透過呼叫建構
函式 (不使用引數)、或呼叫 users.get_current_user() 函式，來取得 User
 實例，此實例代表目前登入應用程式的使用者。若目前的使用者尚未登入，則
 Users 建構函式會引發 UserNotFoundError。(若使用者未登人
，users.get_current_user() 不會引發例外狀況。)

使用者的物件可以相互比較。若兩個 User 物件相等，則這兩個物件都代表相同
使用者。

User 物件可以是資料存放區實體屬性的值。請參閱類型和 Property 類別。

注意：使用者可以變更 Google 帳戶的電子郵件地址。如果您需要一個能代表使
用者的 ID，無論帳戶如何變更，請使用 user_id()。

class User(email=None)
代表具有 Google 帳戶的使用者。

引數：

email
  指定使用者的電子郵件地址。若略過，則物件會代表目前的使用者 (即發出要求
  的使用者)。若未指定電子郵件地址，且目前的使用者未登入，則會引發
   UserNotFoundError。

  建立 User 物件時，不會檢查電子郵件地址是否有效。具有電子郵件地址的
  User 物件，其地址若沒有對應到有效的 Google 帳戶，仍然可以儲存在資料存
  放區，但是不會對應到真正的使用者。

實例方法

User 實例提供下列方法。

nickname()
傳回使用者的「暱稱」，為可顯示的名稱。如果使用者的電子郵件地址與應用程式位於相同網域，暱稱就會是電子郵件地址的「名稱」部分，否則會使用其完整的電子郵件地址做為暱稱。
email()
傳回使用者的電子郵件地址。應用程式應該使用 nickname 做為顯示名稱。
user_id()
傳回使用者的獨特永久 ID，一個 str。無論使用者是否變更電子郵件地址，該 ID 永遠不會變。

函式
~~~~
google.appengine.api.users 套件提供下列函式：
create_login_url(dest_url)

  傳回一個 URL，造訪該 URL 則會提示使用者以 Google 帳戶登入，
  然後將使用者重新導向回到 dest_url 指定的 URL。
  此 URL 適用於連結、按鈕以及重新導向。

  dest_url 可以是完整 URL，或是應用程式網域的相關路徑。

create_logout_url(dest_url)

  傳回一個 URL，造訪該 URL 則會將使用者登出，
  再將使用者重新導向回到 dest_url 指定的 URL。
  此 URL 適用於連結、按鈕以及重新導向。

  dest_url 可以是完整 URL，或是應用程式網域的相關路徑。

get_current_user()
若使用者已登入，則傳回目前使用者 (即發出要求進行處理的使用者)的使用者物件；若使用者未登入，則傳回 None。
is_current_user_admin()
若目前使用者已登入，且目前註冊為此應用程式的系統管理員，則傳回 True。
