import Test.HUnit
import DetectEncoding
import Control.Monad.State.Lazy
import Numeric
import qualified Data.ByteString as B
import qualified Data.ByteString.Char8 as C
import System.IO

main = runTestTT testChecklines

g = do 
    bs <- B.readFile "utf8.txt"
    let ws = B.unpack bs
    f <- openFile "utf8bs.txt" WriteMode
    hPutStr f "["
    forM_ ws $ \w -> do
        hPutStr f $ "0x" ++ showHex w ","
    hPutStr f "]"

testProbUTF8 = test ["prob utf8 test" ~:
    [   emptyRun {isUTF8Error=False, utf8State="start", utf8WaitNr=0} 
    ~=? execState (probeUTF8 0x28) emptyRun -- for ascii
    ]
  ]

testChecklines = test ["checklines" ~:
    [   [B.pack[0x31]]
    ~=? bLines (B.pack[0x31])

    ,   [B.pack[0x31], B.empty]
    ~=? bLines (B.pack[0x31,0x0d,0x0a])

    ,   [B.pack[0x31],B.pack[0x32],B.pack[0x33]]
    ~=? bLines (B.pack[0x31, 0x0d, 0x0a, 0x32, 0x0d, 0x0a, 0x33])

    ,   C.pack "1\n2\n3\n4\n5\n7\n8\n9\n10\n11\n" 
    ~=? getChecklines (C.pack 
        "1\r\n2\r\n3\r\n4\r\n5\r\n7\r\n8\r\n9\r\n10\r\n11")

    ]
  ]

testDetectEncoding = 
    test [ "detect encoding test" ~: 
          [ Just UTF8  ~=? (probeBOM $ B.pack[0xef, 0xbb, 0xbf, 0x01])

          , UTF8 ~=? detectEncoding (B.pack[0xef, 0xbb, 0xbf, 0x01])

          , Just UTF16 ~=? (probeBOM $ B.pack[0xfe, 0xff, 0xbf, 0x01])

          , UTF16 ~=? detectEncoding (B.pack[0xfe, 0xff, 0xbf, 0x01])

          ,   emptyRun {cp950Error = 2} 
          ~=? execState (forM_ [0xe1,0x39,0xe0,0x20] probeCP950) emptyRun

          , emptyRun { isUTF8Error=True, utf8State="start", utf8WaitNr=0
                     , cp950Count=22, cp950Error = 6 
                     } 
          ~=? execState (probeString big5BStr) emptyRun

          , emptyRun { cp950Count=23, cp950Error = 6
                     , resCount=23  , resEnc=CP950} 
          ~=? (execState tryCP950 $ emptyRun {cp950Count=23, cp950Error = 6}) 
          , CP950
          ~=? detectEncoding big5BStr

          , emptyRun {isUTF8Error=False, utf8State="start", utf8WaitNr=0} 
          ~=? execState (probeUTF8 0x28) emptyRun -- for ascii

          , emptyRun {isUTF8Error=False, utf8State="wait", utf8WaitNr=2} 
          ~=? execState (probeUTF8 0xe1) emptyRun

          , emptyRun {isUTF8Error=False, utf8State="wait", utf8WaitNr=3} 
          ~=? execState (probeUTF8 0xf1) emptyRun

          , emptyRun {isUTF8Error=False, utf8State="wait", utf8WaitNr=2} 
          ~=? execState (forM_ [0xf1,0x81] probeUTF8) emptyRun

          , emptyRun {isUTF8Error=False, utf8State="wait", utf8WaitNr=1} 
          ~=? execState (forM_ [0xf1,0x81,0x82] probeUTF8) emptyRun

          , emptyRun {isUTF8Error=False, utf8State="start", utf8WaitNr=0} 
          ~=? execState (forM_ [0xf1,0x81,0x82,0x83] probeUTF8) emptyRun

          , emptyRun {isUTF8Error=False, utf8State="wait", utf8WaitNr=2} 
          ~=? execState (forM_ [0xf1,0x81,0x82,0x83,0xe1] probeUTF8) emptyRun

          , emptyRun { isUTF8Error=False, utf8State="start", utf8WaitNr=0
                     , cp950Count=1, cp950Error = 35 
                     } 
          ~=? execState (probeString utf8BStr) emptyRun

          , UTF8
          ~=? detectEncoding utf8BStr

          ]

         ]

big5BStr = B.pack [0x28,0xba,0xee,0xa6,0x58,0xb3,0xf8,0xb9,0x44,0x29,0x28,0xac,0x50,0xae,0x71,0xa4,0xe9,0xb3,0xf8,0xb3,0xf8,0xb9,0x44,0x29,0xbd,0x71,0xa8,0x6c,0xc1,0x60,0xb2,0xce,0xa7,0x64,0xb5,0x6e,0xb2,0xb1,0xc4,0x7e,0xa4,0xe9,0xab,0x65,0xa6,0x62,0xc1,0x70,0xa6,0x58,0xb0,0xea,0xa4,0xbd,0xb6,0x7d,0xc6,0x67,0xb4,0xad,0xa9,0xf9,0xa4,0x73,0xaf,0xc0,0xae,0x56,0xac,0xb0,0xd,0xa,0xa5,0xc1,0xa5,0x44,0xa7,0x40,0xa5,0x58,0xb0,0x5e,0xc4,0x6d,0xab,0xe1,0xa1,0x41,0xa6,0x41,0xa6,0x62,0xb1,0xb5,0xa8,0xfc,0xad,0x5e,0xb0,0xea,0xbc,0x73,0xbc,0xbd,0xa4,0xbd,0xa5,0x71,0xa1,0x5d,0x42,0x42,0x43,0xa1,0x5e,0xb3,0x58,0xb0,0xdd,0xae,0xc9,0xa4,0xbd,0xb6,0x7d,0xaa,0xed,0xa9,0xfa,0xa1,0x41,0xa6,0x70,0xaa,0x47,0xbd,0x71,0xa8,0x6c,0xa4,0x48,0xd,0xa,0xa5,0xc1,0xa7,0xeb,0xb2,0xbc,0xbf,0xef,0xa9,0xf9,0xa4,0x73,0xaf,0xc0,0xae,0x56,0xb0,0xb5,0xc1,0x60,0xb2,0xce,0xa1,0x41,0xa5,0x4c,0xac,0x4f,0xb7,0x7c,0xb1,0xb5,0xa8,0xfc,0xaa,0xba,0xa1,0x43,0x20,0xb3,0x6f,0xac,0x4f,0xa6,0xdb,0xb1,0x71,0xbd,0x71,0xa8,0x6c,0xad,0x78,0xac,0x46,0xa9,0xb2,0xa9,0xf3,0xa5,0x68,0xa6,0x7e,0xa4,0x54,0xa4,0xeb,0xb8,0xd1,0xd,0xa,0xb4,0xb2,0xa5,0x48,0xa8,0xd3,0xa1,0x41,0xb8,0xd3,0xb0,0xea,0xb7,0xed,0xc5,0x76,0xaa,0xcc,0xad,0xba,0xa6,0xb8,0xaa,0xed,0xa5,0xdc,0xc4,0x40,0xb7,0x4e,0xb1,0xb5,0xa8,0xfc,0xa9,0xf9,0xa4,0x73,0xaf,0xc0,0xae,0x56,0xb7,0xed,0x20,0xd,0xa]

utf8BStr = B.pack [0x28,0x7d,0x9c,0x54,0x8,0x58,0x31,0x90,0x53,0x0,0x29,0x0,0x28,0x66,0x1f,0x5c,0xf6,0x65,0xe5,0x58,0x31,0x58,0x31,0x90,0x53,0x0,0x29,0x7d,0xec,0x75,0x38,0x7e,0x3d,0x7d,0x71,0x54,0x33,0x76,0x7b,0x76,0xdb,0x7e,0x7c,0x65,0xe5,0x52,0x4d,0x57,0x28,0x80,0x6f,0x54,0x8,0x57,0xb,0x51,0x6c,0x95,0x8b,0x8b,0x9a,0x63,0xda,0x66,0x2,0x5c,0x71,0x7d,0x20,0x59,0xec,0x70,0xba,0x0,0xd,0x0,0xa,0x6c,0x11,0x4e,0x3b,0x4f,0x5c,0x51,0xfa,0x8c,0xa2,0x73,0x7b,0x5f,0x8c,0xff,0xc,0x51,0x8d,0x57,0x28,0x63,0xa5,0x53,0xd7,0x82,0xf1,0x57,0xb,0x5e,0xe3,0x64,0xad,0x51,0x6c,0x53,0xf8,0xff,0x8,0x0,0x42,0x0,0x42,0x0,0x43,0xff,0x9,0x8a,0x2a,0x55,0x4f,0x66,0x42,0x51,0x6c,0x95,0x8b,0x88,0x68,0x66,0xe,0xff,0xc,0x59,0x82,0x67,0x9c,0x7d,0xec,0x75,0x38,0x4e,0xba,0x0,0xd,0x0,0xa,0x6c,0x11,0x62,0x95,0x79,0x68,0x90,0x78,0x66,0x2,0x5c,0x71,0x7d,0x20,0x59,0xec,0x50,0x5a,0x7e,0x3d,0x7d,0x71,0xff,0xc,0x4e,0xd6,0x66,0x2f,0x67,0x3,0x63,0xa5,0x53,0xd7,0x76,0x84,0x30,0x2,0x0,0x20,0x90,0x19,0x66,0x2f,0x81,0xea,0x5f,0x9e,0x7d,0xec,0x75,0x38,0x8e,0xcd,0x65,0x3f,0x5e,0x9c,0x65,0xbc,0x53,0xbb,0x5e,0x74,0x4e,0x9,0x67,0x8,0x89,0xe3,0x0,0xd,0x0,0xa,0x65,0x63,0x4e,0xe5,0x4f,0x86,0xff,0xc,0x8a,0x72,0x57,0xb,0x75,0x76,0x6b,0xa,0x80,0x5,0x99,0x96,0x6b,0x21,0x88,0x68,0x79,0x3a,0x98,0x58,0x61,0xf,0x63,0xa5,0x53,0xd7,0x66,0x2,0x5c,0x71,0x7d,0x20,0x59,0xec,0x75,0x76,0x0,0x20,0x0,0xd,0x0,0xa]
